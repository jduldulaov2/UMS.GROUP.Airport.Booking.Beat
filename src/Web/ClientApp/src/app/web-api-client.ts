//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IFoodCategoryClient {
    createFoodCategory(command: CreateFoodCategoryCommand): Observable<ResultOfCreateFoodCategoryCommandDto>;
    updateFoodCategory(command: UpdateFoodCategoryCommand): Observable<ResultOfUpdateFoodCategoryCommandDto>;
    getAllFoodCategory(): Observable<GetAllFoodCategoryQueryDto[]>;
    getAllFoodCategoryById(uniqueId: string | null | undefined): Observable<ResultOfGetAllFoodCategoryByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class FoodCategoryClient implements IFoodCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createFoodCategory(command: CreateFoodCategoryCommand): Observable<ResultOfCreateFoodCategoryCommandDto> {
        let url_ = this.baseUrl + "/api/FoodCategory/CreateFoodCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFoodCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFoodCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateFoodCategoryCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateFoodCategoryCommandDto>;
        }));
    }

    protected processCreateFoodCategory(response: HttpResponseBase): Observable<ResultOfCreateFoodCategoryCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateFoodCategoryCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateFoodCategory(command: UpdateFoodCategoryCommand): Observable<ResultOfUpdateFoodCategoryCommandDto> {
        let url_ = this.baseUrl + "/api/FoodCategory/UpdateFoodCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFoodCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFoodCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateFoodCategoryCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateFoodCategoryCommandDto>;
        }));
    }

    protected processUpdateFoodCategory(response: HttpResponseBase): Observable<ResultOfUpdateFoodCategoryCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateFoodCategoryCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllFoodCategory(): Observable<GetAllFoodCategoryQueryDto[]> {
        let url_ = this.baseUrl + "/api/FoodCategory/GetAllFoodCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFoodCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFoodCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllFoodCategoryQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllFoodCategoryQueryDto[]>;
        }));
    }

    protected processGetAllFoodCategory(response: HttpResponseBase): Observable<GetAllFoodCategoryQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllFoodCategoryQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllFoodCategoryById(uniqueId: string | null | undefined): Observable<ResultOfGetAllFoodCategoryByIdQueryDto> {
        let url_ = this.baseUrl + "/api/FoodCategory/GetAllFoodCategoryById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFoodCategoryById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFoodCategoryById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllFoodCategoryByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllFoodCategoryByIdQueryDto>;
        }));
    }

    protected processGetAllFoodCategoryById(response: HttpResponseBase): Observable<ResultOfGetAllFoodCategoryByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllFoodCategoryByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAirportClient {
    getAllAirportByCountry(countryId: number | null | undefined): Observable<GetAllAirportByCountryQueryDto[]>;
    getAirportById(uniqueId: string | null | undefined): Observable<ResultOfGetAirportByIdQueryDto>;
    getAllAirport(): Observable<GetAllAirportQueryDto[]>;
    getAirportByName(airportName: string | null | undefined): Observable<GetAirportByNameQueryDto[]>;
    createAirport(command: CreateAirportCommand): Observable<ResultOfCreateAirportCommandDto>;
    updateAirport(command: UpdateAirportCommand): Observable<ResultOfUpdateAirportCommandDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AirportClient implements IAirportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllAirportByCountry(countryId: number | null | undefined): Observable<GetAllAirportByCountryQueryDto[]> {
        let url_ = this.baseUrl + "/api/Airport/GetAllAirportByCountry?";
        if (countryId !== undefined && countryId !== null)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllAirportByCountry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllAirportByCountry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllAirportByCountryQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllAirportByCountryQueryDto[]>;
        }));
    }

    protected processGetAllAirportByCountry(response: HttpResponseBase): Observable<GetAllAirportByCountryQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllAirportByCountryQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAirportById(uniqueId: string | null | undefined): Observable<ResultOfGetAirportByIdQueryDto> {
        let url_ = this.baseUrl + "/api/Airport/GetAirportById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAirportById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAirportById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAirportByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAirportByIdQueryDto>;
        }));
    }

    protected processGetAirportById(response: HttpResponseBase): Observable<ResultOfGetAirportByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAirportByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllAirport(): Observable<GetAllAirportQueryDto[]> {
        let url_ = this.baseUrl + "/api/Airport/GetAllAirport";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllAirport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllAirport(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllAirportQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllAirportQueryDto[]>;
        }));
    }

    protected processGetAllAirport(response: HttpResponseBase): Observable<GetAllAirportQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllAirportQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAirportByName(airportName: string | null | undefined): Observable<GetAirportByNameQueryDto[]> {
        let url_ = this.baseUrl + "/api/Airport/GetAirportByName?";
        if (airportName !== undefined && airportName !== null)
            url_ += "AirportName=" + encodeURIComponent("" + airportName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAirportByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAirportByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAirportByNameQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAirportByNameQueryDto[]>;
        }));
    }

    protected processGetAirportByName(response: HttpResponseBase): Observable<GetAirportByNameQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAirportByNameQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createAirport(command: CreateAirportCommand): Observable<ResultOfCreateAirportCommandDto> {
        let url_ = this.baseUrl + "/api/Airport/CreateAirport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAirport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAirport(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateAirportCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateAirportCommandDto>;
        }));
    }

    protected processCreateAirport(response: HttpResponseBase): Observable<ResultOfCreateAirportCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateAirportCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAirport(command: UpdateAirportCommand): Observable<ResultOfUpdateAirportCommandDto> {
        let url_ = this.baseUrl + "/api/Airport/UpdateAirport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAirport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAirport(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateAirportCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateAirportCommandDto>;
        }));
    }

    protected processUpdateAirport(response: HttpResponseBase): Observable<ResultOfUpdateAirportCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateAirportCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAuthClient {
    login(userName: string | null | undefined, password: string | null | undefined, isPersistent: boolean, lockOutOnFailure: boolean): Observable<ResultOfLoginDto>;
    logOut(userId: string | null | undefined): Observable<ResultOfLogoutDto>;
    geLoggedIn(): Observable<ResultOfGetLoggedInQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthClient implements IAuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    login(userName: string | null | undefined, password: string | null | undefined, isPersistent: boolean, lockOutOnFailure: boolean): Observable<ResultOfLoginDto> {
        let url_ = this.baseUrl + "/api/Auth/Login?";
        if (userName !== undefined && userName !== null)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
        if (password !== undefined && password !== null)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        if (isPersistent === undefined || isPersistent === null)
            throw new Error("The parameter 'isPersistent' must be defined and cannot be null.");
        else
            url_ += "IsPersistent=" + encodeURIComponent("" + isPersistent) + "&";
        if (lockOutOnFailure === undefined || lockOutOnFailure === null)
            throw new Error("The parameter 'lockOutOnFailure' must be defined and cannot be null.");
        else
            url_ += "LockOutOnFailure=" + encodeURIComponent("" + lockOutOnFailure) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfLoginDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfLoginDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ResultOfLoginDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfLoginDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    logOut(userId: string | null | undefined): Observable<ResultOfLogoutDto> {
        let url_ = this.baseUrl + "/api/Auth/LogOut?";
        if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogOut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogOut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfLogoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfLogoutDto>;
        }));
    }

    protected processLogOut(response: HttpResponseBase): Observable<ResultOfLogoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfLogoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    geLoggedIn(): Observable<ResultOfGetLoggedInQueryDto> {
        let url_ = this.baseUrl + "/api/Auth/GeLoggedIn";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGeLoggedIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGeLoggedIn(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetLoggedInQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetLoggedInQueryDto>;
        }));
    }

    protected processGeLoggedIn(response: HttpResponseBase): Observable<ResultOfGetLoggedInQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetLoggedInQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IBookingsClient {
    getAllBookings(): Observable<GetAllBookingQueryDto[]>;
    getBookingById(uniqueId: string | null | undefined): Observable<ResultOfGetBookingByIdQueryDto>;
    getBookingByName(lastName: string | null | undefined): Observable<GetBookingByNameQueryDto[]>;
    createBooking(command: CreateBookingCommand): Observable<ResultOfCreateBookingCommandDto>;
    updateBooking(command: UpdateBookingCommand): Observable<ResultOfUpdateBookingCommandDto>;
}

@Injectable({
    providedIn: 'root'
})
export class BookingsClient implements IBookingsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllBookings(): Observable<GetAllBookingQueryDto[]> {
        let url_ = this.baseUrl + "/api/Bookings/GetAllBookings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllBookings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllBookings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllBookingQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllBookingQueryDto[]>;
        }));
    }

    protected processGetAllBookings(response: HttpResponseBase): Observable<GetAllBookingQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllBookingQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBookingById(uniqueId: string | null | undefined): Observable<ResultOfGetBookingByIdQueryDto> {
        let url_ = this.baseUrl + "/api/Bookings/GetBookingById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetBookingByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetBookingByIdQueryDto>;
        }));
    }

    protected processGetBookingById(response: HttpResponseBase): Observable<ResultOfGetBookingByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetBookingByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBookingByName(lastName: string | null | undefined): Observable<GetBookingByNameQueryDto[]> {
        let url_ = this.baseUrl + "/api/Bookings/GetBookingByName?";
        if (lastName !== undefined && lastName !== null)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetBookingByNameQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetBookingByNameQueryDto[]>;
        }));
    }

    protected processGetBookingByName(response: HttpResponseBase): Observable<GetBookingByNameQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetBookingByNameQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createBooking(command: CreateBookingCommand): Observable<ResultOfCreateBookingCommandDto> {
        let url_ = this.baseUrl + "/api/Bookings/CreateBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateBookingCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateBookingCommandDto>;
        }));
    }

    protected processCreateBooking(response: HttpResponseBase): Observable<ResultOfCreateBookingCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateBookingCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateBooking(command: UpdateBookingCommand): Observable<ResultOfUpdateBookingCommandDto> {
        let url_ = this.baseUrl + "/api/Bookings/UpdateBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateBookingCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateBookingCommandDto>;
        }));
    }

    protected processUpdateBooking(response: HttpResponseBase): Observable<ResultOfUpdateBookingCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateBookingCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICountryClient {
    getCountry(): Observable<GetAllCountryQueryDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CountryClient implements ICountryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getCountry(): Observable<GetAllCountryQueryDto[]> {
        let url_ = this.baseUrl + "/api/Country";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllCountryQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllCountryQueryDto[]>;
        }));
    }

    protected processGetCountry(response: HttpResponseBase): Observable<GetAllCountryQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllCountryQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICustomRolesClient {
    createCustomRole(command: CreateCustomRoleCommand): Observable<ResultOfCreateCustomRoleCommandDto>;
    updateCustomRole(command: UpdateCustomRoleCommand): Observable<ResultOfUpdateCustomRoleCommandDto>;
    getAllCustomRole(): Observable<GetAllCustomRoleQueryDto[]>;
    getAllCustomRoleById(uniqueId: string | null | undefined): Observable<ResultOfGetAllCustomRoleByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CustomRolesClient implements ICustomRolesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createCustomRole(command: CreateCustomRoleCommand): Observable<ResultOfCreateCustomRoleCommandDto> {
        let url_ = this.baseUrl + "/api/CustomRoles/CreateCustomRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCustomRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCustomRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateCustomRoleCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateCustomRoleCommandDto>;
        }));
    }

    protected processCreateCustomRole(response: HttpResponseBase): Observable<ResultOfCreateCustomRoleCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateCustomRoleCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateCustomRole(command: UpdateCustomRoleCommand): Observable<ResultOfUpdateCustomRoleCommandDto> {
        let url_ = this.baseUrl + "/api/CustomRoles/UpdateCustomRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCustomRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCustomRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateCustomRoleCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateCustomRoleCommandDto>;
        }));
    }

    protected processUpdateCustomRole(response: HttpResponseBase): Observable<ResultOfUpdateCustomRoleCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateCustomRoleCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllCustomRole(): Observable<GetAllCustomRoleQueryDto[]> {
        let url_ = this.baseUrl + "/api/CustomRoles/GetAllCustomRole";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCustomRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCustomRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllCustomRoleQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllCustomRoleQueryDto[]>;
        }));
    }

    protected processGetAllCustomRole(response: HttpResponseBase): Observable<GetAllCustomRoleQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllCustomRoleQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllCustomRoleById(uniqueId: string | null | undefined): Observable<ResultOfGetAllCustomRoleByIdQueryDto> {
        let url_ = this.baseUrl + "/api/CustomRoles/GetAllCustomRoleById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCustomRoleById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCustomRoleById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllCustomRoleByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllCustomRoleByIdQueryDto>;
        }));
    }

    protected processGetAllCustomRoleById(response: HttpResponseBase): Observable<ResultOfGetAllCustomRoleByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllCustomRoleByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDraftCartItemsClient {
    createDraftCartItems(command: CreateDraftCartItemsCommand): Observable<ResultOfCreateDraftCartItemsCommandDto>;
    updateDraftCartItems(command: UpdateDraftCartItemsCommand): Observable<ResultOfUpdateDraftCartItemsCommandDto>;
    getAllDraftCartItemsByCode(draftCode: string | null | undefined): Observable<GetAllDraftCartItemsQueryDtoByCode[]>;
}

@Injectable({
    providedIn: 'root'
})
export class DraftCartItemsClient implements IDraftCartItemsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createDraftCartItems(command: CreateDraftCartItemsCommand): Observable<ResultOfCreateDraftCartItemsCommandDto> {
        let url_ = this.baseUrl + "/api/DraftCartItems/CreateDraftCartItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDraftCartItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDraftCartItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateDraftCartItemsCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateDraftCartItemsCommandDto>;
        }));
    }

    protected processCreateDraftCartItems(response: HttpResponseBase): Observable<ResultOfCreateDraftCartItemsCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateDraftCartItemsCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateDraftCartItems(command: UpdateDraftCartItemsCommand): Observable<ResultOfUpdateDraftCartItemsCommandDto> {
        let url_ = this.baseUrl + "/api/DraftCartItems/UpdateDraftCartItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDraftCartItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDraftCartItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateDraftCartItemsCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateDraftCartItemsCommandDto>;
        }));
    }

    protected processUpdateDraftCartItems(response: HttpResponseBase): Observable<ResultOfUpdateDraftCartItemsCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateDraftCartItemsCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllDraftCartItemsByCode(draftCode: string | null | undefined): Observable<GetAllDraftCartItemsQueryDtoByCode[]> {
        let url_ = this.baseUrl + "/api/DraftCartItems/GetAllDraftCartItemsByCode?";
        if (draftCode !== undefined && draftCode !== null)
            url_ += "DraftCode=" + encodeURIComponent("" + draftCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDraftCartItemsByCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDraftCartItemsByCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllDraftCartItemsQueryDtoByCode[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllDraftCartItemsQueryDtoByCode[]>;
        }));
    }

    protected processGetAllDraftCartItemsByCode(response: HttpResponseBase): Observable<GetAllDraftCartItemsQueryDtoByCode[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllDraftCartItemsQueryDtoByCode.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IFlightsClient {
    getAllFlights(): Observable<GetAllFlightQueryDto[]>;
    getFlightById(uniqueId: string | null | undefined): Observable<ResultOfGetFlightByIdQueryDto>;
    getFlightByName(flightCode: string | null | undefined): Observable<GetFlightNameQueryDto[]>;
    createFlight(command: CreateFlightCommand): Observable<ResultOfCreateFlightCommandDto>;
    updateFlight(command: UpdateFlightCommand): Observable<ResultOfUpdateFlightCommandDto>;
}

@Injectable({
    providedIn: 'root'
})
export class FlightsClient implements IFlightsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllFlights(): Observable<GetAllFlightQueryDto[]> {
        let url_ = this.baseUrl + "/api/Flights/GetAllFlights";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFlights(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFlights(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllFlightQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllFlightQueryDto[]>;
        }));
    }

    protected processGetAllFlights(response: HttpResponseBase): Observable<GetAllFlightQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllFlightQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getFlightById(uniqueId: string | null | undefined): Observable<ResultOfGetFlightByIdQueryDto> {
        let url_ = this.baseUrl + "/api/Flights/GetFlightById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFlightById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFlightById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetFlightByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetFlightByIdQueryDto>;
        }));
    }

    protected processGetFlightById(response: HttpResponseBase): Observable<ResultOfGetFlightByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetFlightByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getFlightByName(flightCode: string | null | undefined): Observable<GetFlightNameQueryDto[]> {
        let url_ = this.baseUrl + "/api/Flights/GetFlightByName?";
        if (flightCode !== undefined && flightCode !== null)
            url_ += "FlightCode=" + encodeURIComponent("" + flightCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFlightByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFlightByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetFlightNameQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetFlightNameQueryDto[]>;
        }));
    }

    protected processGetFlightByName(response: HttpResponseBase): Observable<GetFlightNameQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetFlightNameQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createFlight(command: CreateFlightCommand): Observable<ResultOfCreateFlightCommandDto> {
        let url_ = this.baseUrl + "/api/Flights/CreateFlight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFlight(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFlight(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateFlightCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateFlightCommandDto>;
        }));
    }

    protected processCreateFlight(response: HttpResponseBase): Observable<ResultOfCreateFlightCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateFlightCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateFlight(command: UpdateFlightCommand): Observable<ResultOfUpdateFlightCommandDto> {
        let url_ = this.baseUrl + "/api/Flights/UpdateFlight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFlight(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFlight(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateFlightCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateFlightCommandDto>;
        }));
    }

    protected processUpdateFlight(response: HttpResponseBase): Observable<ResultOfUpdateFlightCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateFlightCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IFoodsClient {
    createFood(command: CreateFoodCommand): Observable<ResultOfCreateFoodCommandDto>;
    updateFood(command: UpdateFoodCommand): Observable<ResultOfUpdateFoodCommandDto>;
    getAllFood(): Observable<GetAllFoodQueryDto[]>;
    getAllFoodByCategoryId(foodCategoryId: number | null | undefined): Observable<GetAllFoodByCategoryIdQueryDto[]>;
    getAllFoodById(uniqueId: string | null | undefined): Observable<ResultOfGetAllFoodByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class FoodsClient implements IFoodsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createFood(command: CreateFoodCommand): Observable<ResultOfCreateFoodCommandDto> {
        let url_ = this.baseUrl + "/api/Foods/CreateFood";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFood(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFood(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateFoodCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateFoodCommandDto>;
        }));
    }

    protected processCreateFood(response: HttpResponseBase): Observable<ResultOfCreateFoodCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateFoodCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateFood(command: UpdateFoodCommand): Observable<ResultOfUpdateFoodCommandDto> {
        let url_ = this.baseUrl + "/api/Foods/UpdateFood";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFood(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFood(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateFoodCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateFoodCommandDto>;
        }));
    }

    protected processUpdateFood(response: HttpResponseBase): Observable<ResultOfUpdateFoodCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateFoodCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllFood(): Observable<GetAllFoodQueryDto[]> {
        let url_ = this.baseUrl + "/api/Foods/GetAllFood";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFood(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFood(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllFoodQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllFoodQueryDto[]>;
        }));
    }

    protected processGetAllFood(response: HttpResponseBase): Observable<GetAllFoodQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllFoodQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllFoodByCategoryId(foodCategoryId: number | null | undefined): Observable<GetAllFoodByCategoryIdQueryDto[]> {
        let url_ = this.baseUrl + "/api/Foods/GetAllFoodByCategoryId?";
        if (foodCategoryId !== undefined && foodCategoryId !== null)
            url_ += "FoodCategoryId=" + encodeURIComponent("" + foodCategoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFoodByCategoryId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFoodByCategoryId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllFoodByCategoryIdQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllFoodByCategoryIdQueryDto[]>;
        }));
    }

    protected processGetAllFoodByCategoryId(response: HttpResponseBase): Observable<GetAllFoodByCategoryIdQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllFoodByCategoryIdQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllFoodById(uniqueId: string | null | undefined): Observable<ResultOfGetAllFoodByIdQueryDto> {
        let url_ = this.baseUrl + "/api/Foods/GetAllFoodById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFoodById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFoodById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllFoodByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllFoodByIdQueryDto>;
        }));
    }

    protected processGetAllFoodById(response: HttpResponseBase): Observable<ResultOfGetAllFoodByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllFoodByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPlanesClient {
    getAllPlanes(): Observable<GetAllPlanesQueryDto[]>;
    getPlaneById(uniqueId: string | null | undefined): Observable<ResultOfGetPlaneByIdQueryDto>;
    getPlaneByName(airlineName: string | null | undefined): Observable<GetPlaneByNameQueryDto[]>;
    createAirline(command: CreateAirlineCommand): Observable<ResultOfCreateAirlineCommandDto>;
    updateAirline(command: UpdateAirlineCommand): Observable<ResultOfUpdateAirlineCommandDto>;
}

@Injectable({
    providedIn: 'root'
})
export class PlanesClient implements IPlanesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllPlanes(): Observable<GetAllPlanesQueryDto[]> {
        let url_ = this.baseUrl + "/api/Planes/GetAllPlanes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPlanes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPlanes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllPlanesQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllPlanesQueryDto[]>;
        }));
    }

    protected processGetAllPlanes(response: HttpResponseBase): Observable<GetAllPlanesQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllPlanesQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPlaneById(uniqueId: string | null | undefined): Observable<ResultOfGetPlaneByIdQueryDto> {
        let url_ = this.baseUrl + "/api/Planes/GetPlaneById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPlaneById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPlaneById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetPlaneByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetPlaneByIdQueryDto>;
        }));
    }

    protected processGetPlaneById(response: HttpResponseBase): Observable<ResultOfGetPlaneByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetPlaneByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPlaneByName(airlineName: string | null | undefined): Observable<GetPlaneByNameQueryDto[]> {
        let url_ = this.baseUrl + "/api/Planes/GetPlaneByName?";
        if (airlineName !== undefined && airlineName !== null)
            url_ += "AirlineName=" + encodeURIComponent("" + airlineName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPlaneByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPlaneByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPlaneByNameQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPlaneByNameQueryDto[]>;
        }));
    }

    protected processGetPlaneByName(response: HttpResponseBase): Observable<GetPlaneByNameQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetPlaneByNameQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createAirline(command: CreateAirlineCommand): Observable<ResultOfCreateAirlineCommandDto> {
        let url_ = this.baseUrl + "/api/Planes/CreateAirline";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAirline(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAirline(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateAirlineCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateAirlineCommandDto>;
        }));
    }

    protected processCreateAirline(response: HttpResponseBase): Observable<ResultOfCreateAirlineCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateAirlineCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAirline(command: UpdateAirlineCommand): Observable<ResultOfUpdateAirlineCommandDto> {
        let url_ = this.baseUrl + "/api/Planes/UpdateAirline";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAirline(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAirline(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateAirlineCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateAirlineCommandDto>;
        }));
    }

    protected processUpdateAirline(response: HttpResponseBase): Observable<ResultOfUpdateAirlineCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateAirlineCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPromoClient {
    createPromo(command: CreatePromoCommand): Observable<ResultOfCreatePromoCommandDto>;
    updatePromo(command: UpdatePromoCommand): Observable<ResultOfUpdatePromoCommandDto>;
    getAllPromo(): Observable<GetAllPromoQueryDto[]>;
    getAllPromoById(uniqueId: string | null | undefined): Observable<ResultOfGetAllPromoByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class PromoClient implements IPromoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createPromo(command: CreatePromoCommand): Observable<ResultOfCreatePromoCommandDto> {
        let url_ = this.baseUrl + "/api/Promo/CreatePromo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePromo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePromo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreatePromoCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreatePromoCommandDto>;
        }));
    }

    protected processCreatePromo(response: HttpResponseBase): Observable<ResultOfCreatePromoCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreatePromoCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updatePromo(command: UpdatePromoCommand): Observable<ResultOfUpdatePromoCommandDto> {
        let url_ = this.baseUrl + "/api/Promo/UpdatePromo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePromo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePromo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdatePromoCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdatePromoCommandDto>;
        }));
    }

    protected processUpdatePromo(response: HttpResponseBase): Observable<ResultOfUpdatePromoCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdatePromoCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllPromo(): Observable<GetAllPromoQueryDto[]> {
        let url_ = this.baseUrl + "/api/Promo/GetAllPromo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPromo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPromo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllPromoQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllPromoQueryDto[]>;
        }));
    }

    protected processGetAllPromo(response: HttpResponseBase): Observable<GetAllPromoQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllPromoQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllPromoById(uniqueId: string | null | undefined): Observable<ResultOfGetAllPromoByIdQueryDto> {
        let url_ = this.baseUrl + "/api/Promo/GetAllPromoById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPromoById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPromoById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllPromoByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllPromoByIdQueryDto>;
        }));
    }

    protected processGetAllPromoById(response: HttpResponseBase): Observable<ResultOfGetAllPromoByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllPromoByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRestaurantBookingsClient {
    createRestaurantBooking(command: CreateRestaurantBookingCommand): Observable<ResultOfCreateRestaurantBookingCommandDto>;
    updateRestaurantBooking(command: UpdateRestaurantBookingCommand): Observable<ResultOfUpdateRestaurantBookingCommandDto>;
    getAllRestaurantBooking(): Observable<GetAllRestaurantBookingQueryDto[]>;
    getAllRestaurantBookingById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantBookingByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class RestaurantBookingsClient implements IRestaurantBookingsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createRestaurantBooking(command: CreateRestaurantBookingCommand): Observable<ResultOfCreateRestaurantBookingCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantBookings/CreateRestaurantBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRestaurantBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRestaurantBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateRestaurantBookingCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateRestaurantBookingCommandDto>;
        }));
    }

    protected processCreateRestaurantBooking(response: HttpResponseBase): Observable<ResultOfCreateRestaurantBookingCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateRestaurantBookingCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateRestaurantBooking(command: UpdateRestaurantBookingCommand): Observable<ResultOfUpdateRestaurantBookingCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantBookings/UpdateRestaurantBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRestaurantBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRestaurantBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateRestaurantBookingCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateRestaurantBookingCommandDto>;
        }));
    }

    protected processUpdateRestaurantBooking(response: HttpResponseBase): Observable<ResultOfUpdateRestaurantBookingCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateRestaurantBookingCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantBooking(): Observable<GetAllRestaurantBookingQueryDto[]> {
        let url_ = this.baseUrl + "/api/RestaurantBookings/GetAllRestaurantBooking";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllRestaurantBookingQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllRestaurantBookingQueryDto[]>;
        }));
    }

    protected processGetAllRestaurantBooking(response: HttpResponseBase): Observable<GetAllRestaurantBookingQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllRestaurantBookingQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantBookingById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantBookingByIdQueryDto> {
        let url_ = this.baseUrl + "/api/RestaurantBookings/GetAllRestaurantBookingById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantBookingById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantBookingById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllRestaurantBookingByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllRestaurantBookingByIdQueryDto>;
        }));
    }

    protected processGetAllRestaurantBookingById(response: HttpResponseBase): Observable<ResultOfGetAllRestaurantBookingByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllRestaurantBookingByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRestaurantOrdersClient {
    createRestaurantOrder(command: CreateRestaurantOrderCommand): Observable<ResultOfCreateRestaurantOrderCommandDto>;
    updateRestaurantOrder(command: UpdateRestaurantOrderCommand): Observable<ResultOfUpdateRestaurantOrderCommandDto>;
    getAllRestaurantOrder(): Observable<GetAllRestaurantOrderQueryDto[]>;
    getAllRestaurantOrderById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantOrderByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class RestaurantOrdersClient implements IRestaurantOrdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createRestaurantOrder(command: CreateRestaurantOrderCommand): Observable<ResultOfCreateRestaurantOrderCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantOrders/CreateRestaurantOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRestaurantOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRestaurantOrder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateRestaurantOrderCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateRestaurantOrderCommandDto>;
        }));
    }

    protected processCreateRestaurantOrder(response: HttpResponseBase): Observable<ResultOfCreateRestaurantOrderCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateRestaurantOrderCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateRestaurantOrder(command: UpdateRestaurantOrderCommand): Observable<ResultOfUpdateRestaurantOrderCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantOrders/UpdateRestaurantOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRestaurantOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRestaurantOrder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateRestaurantOrderCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateRestaurantOrderCommandDto>;
        }));
    }

    protected processUpdateRestaurantOrder(response: HttpResponseBase): Observable<ResultOfUpdateRestaurantOrderCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateRestaurantOrderCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantOrder(): Observable<GetAllRestaurantOrderQueryDto[]> {
        let url_ = this.baseUrl + "/api/RestaurantOrders/GetAllRestaurantOrder";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantOrder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllRestaurantOrderQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllRestaurantOrderQueryDto[]>;
        }));
    }

    protected processGetAllRestaurantOrder(response: HttpResponseBase): Observable<GetAllRestaurantOrderQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllRestaurantOrderQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantOrderById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantOrderByIdQueryDto> {
        let url_ = this.baseUrl + "/api/RestaurantOrders/GetAllRestaurantOrderById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantOrderById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantOrderById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllRestaurantOrderByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllRestaurantOrderByIdQueryDto>;
        }));
    }

    protected processGetAllRestaurantOrderById(response: HttpResponseBase): Observable<ResultOfGetAllRestaurantOrderByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllRestaurantOrderByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRestaurantOrderDetailsClient {
    createRestaurantOrderDetail(command: CreateRestaurantOrderDetailCommand): Observable<ResultOfCreateRestaurantOrderDetailCommandDto>;
    updateRestaurantOrderDetail(command: UpdateRestaurantOrderDetailCommand): Observable<ResultOfUpdateRestaurantOrderDetailCommandDto>;
    getAllRestaurantOrderDetail(): Observable<GetAllRestaurantOrderDetailQueryDto[]>;
    getAllRestaurantOrderDetailById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantOrderDetailByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class RestaurantOrderDetailsClient implements IRestaurantOrderDetailsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createRestaurantOrderDetail(command: CreateRestaurantOrderDetailCommand): Observable<ResultOfCreateRestaurantOrderDetailCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantOrderDetails/CreateRestaurantOrderDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRestaurantOrderDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRestaurantOrderDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateRestaurantOrderDetailCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateRestaurantOrderDetailCommandDto>;
        }));
    }

    protected processCreateRestaurantOrderDetail(response: HttpResponseBase): Observable<ResultOfCreateRestaurantOrderDetailCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateRestaurantOrderDetailCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateRestaurantOrderDetail(command: UpdateRestaurantOrderDetailCommand): Observable<ResultOfUpdateRestaurantOrderDetailCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantOrderDetails/UpdateRestaurantOrderDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRestaurantOrderDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRestaurantOrderDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateRestaurantOrderDetailCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateRestaurantOrderDetailCommandDto>;
        }));
    }

    protected processUpdateRestaurantOrderDetail(response: HttpResponseBase): Observable<ResultOfUpdateRestaurantOrderDetailCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateRestaurantOrderDetailCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantOrderDetail(): Observable<GetAllRestaurantOrderDetailQueryDto[]> {
        let url_ = this.baseUrl + "/api/RestaurantOrderDetails/GetAllRestaurantOrderDetail";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantOrderDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantOrderDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllRestaurantOrderDetailQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllRestaurantOrderDetailQueryDto[]>;
        }));
    }

    protected processGetAllRestaurantOrderDetail(response: HttpResponseBase): Observable<GetAllRestaurantOrderDetailQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllRestaurantOrderDetailQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantOrderDetailById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantOrderDetailByIdQueryDto> {
        let url_ = this.baseUrl + "/api/RestaurantOrderDetails/GetAllRestaurantOrderDetailById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantOrderDetailById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantOrderDetailById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllRestaurantOrderDetailByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllRestaurantOrderDetailByIdQueryDto>;
        }));
    }

    protected processGetAllRestaurantOrderDetailById(response: HttpResponseBase): Observable<ResultOfGetAllRestaurantOrderDetailByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllRestaurantOrderDetailByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRestaurantTablesClient {
    createRestaurantTable(command: CreateRestaurantTableCommand): Observable<ResultOfCreateRestaurantTableCommandDto>;
    updateRestaurantTable(command: UpdateRestaurantTableCommand): Observable<ResultOfUpdateRestaurantTableCommandDto>;
    getAllRestaurantTable(): Observable<GetAllRestaurantTableQueryDto[]>;
    getAllRestaurantTableById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantTableByIdQueryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class RestaurantTablesClient implements IRestaurantTablesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createRestaurantTable(command: CreateRestaurantTableCommand): Observable<ResultOfCreateRestaurantTableCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantTables/CreateRestaurantTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRestaurantTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRestaurantTable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateRestaurantTableCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateRestaurantTableCommandDto>;
        }));
    }

    protected processCreateRestaurantTable(response: HttpResponseBase): Observable<ResultOfCreateRestaurantTableCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateRestaurantTableCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateRestaurantTable(command: UpdateRestaurantTableCommand): Observable<ResultOfUpdateRestaurantTableCommandDto> {
        let url_ = this.baseUrl + "/api/RestaurantTables/UpdateRestaurantTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRestaurantTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRestaurantTable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateRestaurantTableCommandDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateRestaurantTableCommandDto>;
        }));
    }

    protected processUpdateRestaurantTable(response: HttpResponseBase): Observable<ResultOfUpdateRestaurantTableCommandDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateRestaurantTableCommandDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantTable(): Observable<GetAllRestaurantTableQueryDto[]> {
        let url_ = this.baseUrl + "/api/RestaurantTables/GetAllRestaurantTable";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantTable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllRestaurantTableQueryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllRestaurantTableQueryDto[]>;
        }));
    }

    protected processGetAllRestaurantTable(response: HttpResponseBase): Observable<GetAllRestaurantTableQueryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAllRestaurantTableQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRestaurantTableById(uniqueId: string | null | undefined): Observable<ResultOfGetAllRestaurantTableByIdQueryDto> {
        let url_ = this.baseUrl + "/api/RestaurantTables/GetAllRestaurantTableById?";
        if (uniqueId !== undefined && uniqueId !== null)
            url_ += "UniqueId=" + encodeURIComponent("" + uniqueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRestaurantTableById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRestaurantTableById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGetAllRestaurantTableByIdQueryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGetAllRestaurantTableByIdQueryDto>;
        }));
    }

    protected processGetAllRestaurantTableById(response: HttpResponseBase): Observable<ResultOfGetAllRestaurantTableByIdQueryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGetAllRestaurantTableByIdQueryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUsersClient {
    allUsersByName(searchValue: string | null | undefined, pageNumber: number, pageSize: number): Observable<ResultOfUsersListDto>;
    getUserByID(id: string | null | undefined): Observable<ResultOfUserByIDDto>;
    createIdentityUser(command: CreateUserCommand): Observable<ResultOfCreateUserDto>;
    updateIdentityUser(command: UpdateUserCommand): Observable<ResultOfUpdateUserDto>;
    updatePassword(command: UpdatePasswordCommand): Observable<ResultOfUpdatePasswordDto>;
    getPassword(): Observable<ResultOfGeneratePasswordDto>;
}

@Injectable({
    providedIn: 'root'
})
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    allUsersByName(searchValue: string | null | undefined, pageNumber: number, pageSize: number): Observable<ResultOfUsersListDto> {
        let url_ = this.baseUrl + "/api/Users/AllUsersByName?";
        if (searchValue !== undefined && searchValue !== null)
            url_ += "SearchValue=" + encodeURIComponent("" + searchValue) + "&";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAllUsersByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAllUsersByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUsersListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUsersListDto>;
        }));
    }

    protected processAllUsersByName(response: HttpResponseBase): Observable<ResultOfUsersListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUsersListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUserByID(id: string | null | undefined): Observable<ResultOfUserByIDDto> {
        let url_ = this.baseUrl + "/api/Users/GetUserByID?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserByID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUserByIDDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUserByIDDto>;
        }));
    }

    protected processGetUserByID(response: HttpResponseBase): Observable<ResultOfUserByIDDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUserByIDDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createIdentityUser(command: CreateUserCommand): Observable<ResultOfCreateUserDto> {
        let url_ = this.baseUrl + "/api/Users/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateIdentityUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateIdentityUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfCreateUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfCreateUserDto>;
        }));
    }

    protected processCreateIdentityUser(response: HttpResponseBase): Observable<ResultOfCreateUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfCreateUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateIdentityUser(command: UpdateUserCommand): Observable<ResultOfUpdateUserDto> {
        let url_ = this.baseUrl + "/api/Users/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateIdentityUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateIdentityUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdateUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdateUserDto>;
        }));
    }

    protected processUpdateIdentityUser(response: HttpResponseBase): Observable<ResultOfUpdateUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdateUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updatePassword(command: UpdatePasswordCommand): Observable<ResultOfUpdatePasswordDto> {
        let url_ = this.baseUrl + "/api/Users/UpdatePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfUpdatePasswordDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfUpdatePasswordDto>;
        }));
    }

    protected processUpdatePassword(response: HttpResponseBase): Observable<ResultOfUpdatePasswordDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfUpdatePasswordDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPassword(): Observable<ResultOfGeneratePasswordDto> {
        let url_ = this.baseUrl + "/api/Users/GenerateRandomPassword";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResultOfGeneratePasswordDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResultOfGeneratePasswordDto>;
        }));
    }

    protected processGetPassword(response: HttpResponseBase): Observable<ResultOfGeneratePasswordDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGeneratePasswordDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ResultOfCreateFoodCategoryCommandDto implements IResultOfCreateFoodCategoryCommandDto {
    data?: CreateFoodCategoryCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateFoodCategoryCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateFoodCategoryCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateFoodCategoryCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateFoodCategoryCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateFoodCategoryCommandDto {
    data?: CreateFoodCategoryCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateFoodCategoryCommandDto implements ICreateFoodCategoryCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateFoodCategoryCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateFoodCategoryCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFoodCategoryCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateFoodCategoryCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export enum ResultType {
    Success = 1,
    Warning = 2,
    Error = 3,
    Information = 4,
}

export class CreateFoodCategoryCommand implements ICreateFoodCategoryCommand {
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateFoodCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryName = _data["categoryName"];
            this.categoryDescription = _data["categoryDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateFoodCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFoodCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        data["categoryDescription"] = this.categoryDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateFoodCategoryCommand {
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateFoodCategoryCommandDto implements IResultOfUpdateFoodCategoryCommandDto {
    data?: UpdateFoodCategoryCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateFoodCategoryCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateFoodCategoryCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateFoodCategoryCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateFoodCategoryCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateFoodCategoryCommandDto {
    data?: UpdateFoodCategoryCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateFoodCategoryCommandDto implements IUpdateFoodCategoryCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateFoodCategoryCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateFoodCategoryCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoodCategoryCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateFoodCategoryCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateFoodCategoryCommand implements IUpdateFoodCategoryCommand {
    uniqueId?: string | undefined;
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateFoodCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.categoryName = _data["categoryName"];
            this.categoryDescription = _data["categoryDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateFoodCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoodCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["categoryName"] = this.categoryName;
        data["categoryDescription"] = this.categoryDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateFoodCategoryCommand {
    uniqueId?: string | undefined;
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllFoodCategoryQueryDto implements IGetAllFoodCategoryQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllFoodCategoryQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.categoryName = _data["categoryName"];
            this.categoryDescription = _data["categoryDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllFoodCategoryQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFoodCategoryQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["categoryName"] = this.categoryName;
        data["categoryDescription"] = this.categoryDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllFoodCategoryQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllFoodCategoryByIdQueryDto implements IResultOfGetAllFoodCategoryByIdQueryDto {
    data?: GetAllFoodCategoryByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllFoodCategoryByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllFoodCategoryByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllFoodCategoryByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllFoodCategoryByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllFoodCategoryByIdQueryDto {
    data?: GetAllFoodCategoryByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllFoodCategoryByIdQueryDto implements IGetAllFoodCategoryByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllFoodCategoryByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.categoryName = _data["categoryName"];
            this.categoryDescription = _data["categoryDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllFoodCategoryByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFoodCategoryByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["categoryName"] = this.categoryName;
        data["categoryDescription"] = this.categoryDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllFoodCategoryByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    categoryName?: string | undefined;
    categoryDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllAirportByCountryQueryDto implements IGetAllAirportByCountryQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;

    constructor(data?: IGetAllAirportByCountryQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.airportName = _data["airportName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.countryId = _data["countryId"];
        }
    }

    static fromJS(data: any): GetAllAirportByCountryQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllAirportByCountryQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["airportName"] = this.airportName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["countryId"] = this.countryId;
        return data;
    }
}

export interface IGetAllAirportByCountryQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
}

export class ResultOfGetAirportByIdQueryDto implements IResultOfGetAirportByIdQueryDto {
    data?: GetAirportByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAirportByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAirportByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAirportByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAirportByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAirportByIdQueryDto {
    data?: GetAirportByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAirportByIdQueryDto implements IGetAirportByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAirportByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.airportName = _data["airportName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.countryId = _data["countryId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAirportByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAirportByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["airportName"] = this.airportName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["countryId"] = this.countryId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAirportByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    isActive?: boolean | undefined;
}

export class GetAllAirportQueryDto implements IGetAllAirportQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllAirportQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.airportName = _data["airportName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllAirportQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllAirportQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["airportName"] = this.airportName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllAirportQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAirportByNameQueryDto implements IGetAirportByNameQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAirportByNameQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.airportName = _data["airportName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAirportByNameQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAirportByNameQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["airportName"] = this.airportName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAirportByNameQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateAirportCommandDto implements IResultOfCreateAirportCommandDto {
    data?: CreateAirportCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateAirportCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateAirportCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateAirportCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateAirportCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateAirportCommandDto {
    data?: CreateAirportCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateAirportCommandDto implements ICreateAirportCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateAirportCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateAirportCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAirportCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateAirportCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateAirportCommand implements ICreateAirportCommand {
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateAirportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.airportName = _data["airportName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.countryId = _data["countryId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateAirportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAirportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["airportName"] = this.airportName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["countryId"] = this.countryId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateAirportCommand {
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateAirportCommandDto implements IResultOfUpdateAirportCommandDto {
    data?: UpdateAirportCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateAirportCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateAirportCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateAirportCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateAirportCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateAirportCommandDto {
    data?: UpdateAirportCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateAirportCommandDto implements IUpdateAirportCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateAirportCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateAirportCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAirportCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateAirportCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateAirportCommand implements IUpdateAirportCommand {
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateAirportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.airportName = _data["airportName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.countryId = _data["countryId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateAirportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAirportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["airportName"] = this.airportName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["countryId"] = this.countryId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateAirportCommand {
    uniqueId?: string | undefined;
    airportName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    countryId?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfLoginDto implements IResultOfLoginDto {
    data?: LoginDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? LoginDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfLoginDto {
    data?: LoginDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class LoginDto implements ILoginDto {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.isAdminAccount = _data["isAdminAccount"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["isAdminAccount"] = this.isAdminAccount;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        return data;
    }
}

export interface ILoginDto {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
}

export class ResultOfLogoutDto implements IResultOfLogoutDto {
    data?: LogoutDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfLogoutDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? LogoutDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfLogoutDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfLogoutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfLogoutDto {
    data?: LogoutDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class LogoutDto implements ILogoutDto {
    userId?: string | undefined;
    time?: Date | undefined;

    constructor(data?: ILogoutDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.time = _data["time"] ? new Date(_data["time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LogoutDto {
        data = typeof data === 'object' ? data : {};
        let result = new LogoutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILogoutDto {
    userId?: string | undefined;
    time?: Date | undefined;
}

export class ResultOfGetLoggedInQueryDto implements IResultOfGetLoggedInQueryDto {
    data?: GetLoggedInQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetLoggedInQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetLoggedInQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetLoggedInQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetLoggedInQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetLoggedInQueryDto {
    data?: GetLoggedInQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetLoggedInQueryDto implements IGetLoggedInQueryDto {
    loggedInId?: string | undefined;

    constructor(data?: IGetLoggedInQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loggedInId = _data["loggedInId"];
        }
    }

    static fromJS(data: any): GetLoggedInQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetLoggedInQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loggedInId"] = this.loggedInId;
        return data;
    }
}

export interface IGetLoggedInQueryDto {
    loggedInId?: string | undefined;
}

export class GetAllBookingQueryDto implements IGetAllBookingQueryDto {
    id?: number | undefined;
    flightId?: number | undefined;
    flightCode?: string | undefined;
    flightDate?: string | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    avatar?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    uniqueId?: string | undefined;
    avatarColor?: string | undefined;

    constructor(data?: IGetAllBookingQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flightId = _data["flightId"];
            this.flightCode = _data["flightCode"];
            this.flightDate = _data["flightDate"];
            this.airportName = _data["airportName"];
            this.planeName = _data["planeName"];
            this.origin = _data["origin"];
            this.destination = _data["destination"];
            this.avatar = _data["avatar"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.uniqueId = _data["uniqueId"];
            this.avatarColor = _data["avatarColor"];
        }
    }

    static fromJS(data: any): GetAllBookingQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllBookingQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flightId"] = this.flightId;
        data["flightCode"] = this.flightCode;
        data["flightDate"] = this.flightDate;
        data["airportName"] = this.airportName;
        data["planeName"] = this.planeName;
        data["origin"] = this.origin;
        data["destination"] = this.destination;
        data["avatar"] = this.avatar;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["uniqueId"] = this.uniqueId;
        data["avatarColor"] = this.avatarColor;
        return data;
    }
}

export interface IGetAllBookingQueryDto {
    id?: number | undefined;
    flightId?: number | undefined;
    flightCode?: string | undefined;
    flightDate?: string | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    avatar?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    uniqueId?: string | undefined;
    avatarColor?: string | undefined;
}

export class ResultOfGetBookingByIdQueryDto implements IResultOfGetBookingByIdQueryDto {
    data?: GetBookingByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetBookingByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetBookingByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetBookingByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetBookingByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetBookingByIdQueryDto {
    data?: GetBookingByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetBookingByIdQueryDto implements IGetBookingByIdQueryDto {
    id?: number | undefined;
    flightId?: number | undefined;
    flightDate?: string | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    avatar?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    uniqueId?: string | undefined;
    avatarColor?: string | undefined;

    constructor(data?: IGetBookingByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flightId = _data["flightId"];
            this.flightDate = _data["flightDate"];
            this.origin = _data["origin"];
            this.destination = _data["destination"];
            this.avatar = _data["avatar"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.uniqueId = _data["uniqueId"];
            this.avatarColor = _data["avatarColor"];
        }
    }

    static fromJS(data: any): GetBookingByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flightId"] = this.flightId;
        data["flightDate"] = this.flightDate;
        data["origin"] = this.origin;
        data["destination"] = this.destination;
        data["avatar"] = this.avatar;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["uniqueId"] = this.uniqueId;
        data["avatarColor"] = this.avatarColor;
        return data;
    }
}

export interface IGetBookingByIdQueryDto {
    id?: number | undefined;
    flightId?: number | undefined;
    flightDate?: string | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    avatar?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    uniqueId?: string | undefined;
    avatarColor?: string | undefined;
}

export class GetBookingByNameQueryDto implements IGetBookingByNameQueryDto {
    id?: number | undefined;
    flightId?: number | undefined;
    flightCode?: string | undefined;
    flightDate?: string | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    avatar?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    uniqueId?: string | undefined;
    avatarColor?: string | undefined;

    constructor(data?: IGetBookingByNameQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flightId = _data["flightId"];
            this.flightCode = _data["flightCode"];
            this.flightDate = _data["flightDate"];
            this.airportName = _data["airportName"];
            this.planeName = _data["planeName"];
            this.origin = _data["origin"];
            this.destination = _data["destination"];
            this.avatar = _data["avatar"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.uniqueId = _data["uniqueId"];
            this.avatarColor = _data["avatarColor"];
        }
    }

    static fromJS(data: any): GetBookingByNameQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingByNameQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flightId"] = this.flightId;
        data["flightCode"] = this.flightCode;
        data["flightDate"] = this.flightDate;
        data["airportName"] = this.airportName;
        data["planeName"] = this.planeName;
        data["origin"] = this.origin;
        data["destination"] = this.destination;
        data["avatar"] = this.avatar;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["uniqueId"] = this.uniqueId;
        data["avatarColor"] = this.avatarColor;
        return data;
    }
}

export interface IGetBookingByNameQueryDto {
    id?: number | undefined;
    flightId?: number | undefined;
    flightCode?: string | undefined;
    flightDate?: string | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    avatar?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    uniqueId?: string | undefined;
    avatarColor?: string | undefined;
}

export class ResultOfCreateBookingCommandDto implements IResultOfCreateBookingCommandDto {
    data?: CreateBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateBookingCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateBookingCommandDto {
    data?: CreateBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateBookingCommandDto implements ICreateBookingCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateBookingCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateBookingCommand implements ICreateBookingCommand {
    flightId?: number | undefined;
    flightDate?: Date | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;

    constructor(data?: ICreateBookingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.flightId = _data["flightId"];
            this.flightDate = _data["flightDate"] ? new Date(_data["flightDate"].toString()) : <any>undefined;
            this.origin = _data["origin"];
            this.destination = _data["destination"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
        }
    }

    static fromJS(data: any): CreateBookingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flightId"] = this.flightId;
        data["flightDate"] = this.flightDate ? this.flightDate.toISOString() : <any>undefined;
        data["origin"] = this.origin;
        data["destination"] = this.destination;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        return data;
    }
}

export interface ICreateBookingCommand {
    flightId?: number | undefined;
    flightDate?: Date | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
}

export class ResultOfUpdateBookingCommandDto implements IResultOfUpdateBookingCommandDto {
    data?: UpdateBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateBookingCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateBookingCommandDto {
    data?: UpdateBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateBookingCommandDto implements IUpdateBookingCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateBookingCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateBookingCommand implements IUpdateBookingCommand {
    uniqueId?: string | undefined;
    flightId?: number | undefined;
    flightDate?: Date | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;

    constructor(data?: IUpdateBookingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.flightId = _data["flightId"];
            this.flightDate = _data["flightDate"] ? new Date(_data["flightDate"].toString()) : <any>undefined;
            this.origin = _data["origin"];
            this.destination = _data["destination"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
        }
    }

    static fromJS(data: any): UpdateBookingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["flightId"] = this.flightId;
        data["flightDate"] = this.flightDate ? this.flightDate.toISOString() : <any>undefined;
        data["origin"] = this.origin;
        data["destination"] = this.destination;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        return data;
    }
}

export interface IUpdateBookingCommand {
    uniqueId?: string | undefined;
    flightId?: number | undefined;
    flightDate?: Date | undefined;
    origin?: string | undefined;
    destination?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
}

export class GetAllCountryQueryDto implements IGetAllCountryQueryDto {
    id?: number | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    description?: string | undefined;

    constructor(data?: IGetAllCountryQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryName = _data["countryName"];
            this.countryCode = _data["countryCode"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetAllCountryQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllCountryQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetAllCountryQueryDto {
    id?: number | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    description?: string | undefined;
}

export class ResultOfCreateCustomRoleCommandDto implements IResultOfCreateCustomRoleCommandDto {
    data?: CreateCustomRoleCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateCustomRoleCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateCustomRoleCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateCustomRoleCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateCustomRoleCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateCustomRoleCommandDto {
    data?: CreateCustomRoleCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateCustomRoleCommandDto implements ICreateCustomRoleCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateCustomRoleCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCustomRoleCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomRoleCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateCustomRoleCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateCustomRoleCommand implements ICreateCustomRoleCommand {
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateCustomRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleName = _data["roleName"];
            this.roleDescription = _data["roleDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateCustomRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        data["roleDescription"] = this.roleDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateCustomRoleCommand {
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateCustomRoleCommandDto implements IResultOfUpdateCustomRoleCommandDto {
    data?: UpdateCustomRoleCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateCustomRoleCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateCustomRoleCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateCustomRoleCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateCustomRoleCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateCustomRoleCommandDto {
    data?: UpdateCustomRoleCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateCustomRoleCommandDto implements IUpdateCustomRoleCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateCustomRoleCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateCustomRoleCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomRoleCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateCustomRoleCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateCustomRoleCommand implements IUpdateCustomRoleCommand {
    uniqueId?: string | undefined;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateCustomRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.roleName = _data["roleName"];
            this.roleDescription = _data["roleDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateCustomRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["roleName"] = this.roleName;
        data["roleDescription"] = this.roleDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateCustomRoleCommand {
    uniqueId?: string | undefined;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllCustomRoleQueryDto implements IGetAllCustomRoleQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllCustomRoleQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.roleName = _data["roleName"];
            this.roleDescription = _data["roleDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllCustomRoleQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllCustomRoleQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["roleName"] = this.roleName;
        data["roleDescription"] = this.roleDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllCustomRoleQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllCustomRoleByIdQueryDto implements IResultOfGetAllCustomRoleByIdQueryDto {
    data?: GetAllCustomRoleByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllCustomRoleByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllCustomRoleByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllCustomRoleByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllCustomRoleByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllCustomRoleByIdQueryDto {
    data?: GetAllCustomRoleByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllCustomRoleByIdQueryDto implements IGetAllCustomRoleByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllCustomRoleByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.roleName = _data["roleName"];
            this.roleDescription = _data["roleDescription"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllCustomRoleByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllCustomRoleByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["roleName"] = this.roleName;
        data["roleDescription"] = this.roleDescription;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllCustomRoleByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateDraftCartItemsCommandDto implements IResultOfCreateDraftCartItemsCommandDto {
    data?: CreateDraftCartItemsCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateDraftCartItemsCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateDraftCartItemsCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateDraftCartItemsCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateDraftCartItemsCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateDraftCartItemsCommandDto {
    data?: CreateDraftCartItemsCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateDraftCartItemsCommandDto implements ICreateDraftCartItemsCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateDraftCartItemsCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateDraftCartItemsCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDraftCartItemsCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateDraftCartItemsCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateDraftCartItemsCommand implements ICreateDraftCartItemsCommand {
    bookingReservationId?: string | undefined;
    foodId?: number | undefined;
    currentPrice?: number | undefined;
    currrentQuantity?: number | undefined;
    currentTotal?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateDraftCartItemsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bookingReservationId = _data["bookingReservationId"];
            this.foodId = _data["foodId"];
            this.currentPrice = _data["currentPrice"];
            this.currrentQuantity = _data["currrentQuantity"];
            this.currentTotal = _data["currentTotal"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateDraftCartItemsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDraftCartItemsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingReservationId"] = this.bookingReservationId;
        data["foodId"] = this.foodId;
        data["currentPrice"] = this.currentPrice;
        data["currrentQuantity"] = this.currrentQuantity;
        data["currentTotal"] = this.currentTotal;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateDraftCartItemsCommand {
    bookingReservationId?: string | undefined;
    foodId?: number | undefined;
    currentPrice?: number | undefined;
    currrentQuantity?: number | undefined;
    currentTotal?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateDraftCartItemsCommandDto implements IResultOfUpdateDraftCartItemsCommandDto {
    data?: UpdateDraftCartItemsCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateDraftCartItemsCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateDraftCartItemsCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateDraftCartItemsCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateDraftCartItemsCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateDraftCartItemsCommandDto {
    data?: UpdateDraftCartItemsCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateDraftCartItemsCommandDto implements IUpdateDraftCartItemsCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateDraftCartItemsCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateDraftCartItemsCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDraftCartItemsCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateDraftCartItemsCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateDraftCartItemsCommand implements IUpdateDraftCartItemsCommand {
    uniqueId?: string | undefined;
    bookingReservationId?: string | undefined;
    foodId?: number | undefined;
    currentPrice?: number | undefined;
    currrentQuantity?: number | undefined;
    currentTotal?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateDraftCartItemsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.bookingReservationId = _data["bookingReservationId"];
            this.foodId = _data["foodId"];
            this.currentPrice = _data["currentPrice"];
            this.currrentQuantity = _data["currrentQuantity"];
            this.currentTotal = _data["currentTotal"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateDraftCartItemsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDraftCartItemsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["bookingReservationId"] = this.bookingReservationId;
        data["foodId"] = this.foodId;
        data["currentPrice"] = this.currentPrice;
        data["currrentQuantity"] = this.currrentQuantity;
        data["currentTotal"] = this.currentTotal;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateDraftCartItemsCommand {
    uniqueId?: string | undefined;
    bookingReservationId?: string | undefined;
    foodId?: number | undefined;
    currentPrice?: number | undefined;
    currrentQuantity?: number | undefined;
    currentTotal?: number | undefined;
    isActive?: boolean | undefined;
}

export class GetAllDraftCartItemsQueryDtoByCode implements IGetAllDraftCartItemsQueryDtoByCode {
    id?: number | undefined;
    uniqueId?: string | undefined;
    bookingReservationId?: string | undefined;
    foodId?: number | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    currentPrice?: number | undefined;
    currentQuantity?: number | undefined;
    currentTotal?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllDraftCartItemsQueryDtoByCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.bookingReservationId = _data["bookingReservationId"];
            this.foodId = _data["foodId"];
            this.foodName = _data["foodName"];
            this.foodDescription = _data["foodDescription"];
            this.currentPrice = _data["currentPrice"];
            this.currentQuantity = _data["currentQuantity"];
            this.currentTotal = _data["currentTotal"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllDraftCartItemsQueryDtoByCode {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllDraftCartItemsQueryDtoByCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["bookingReservationId"] = this.bookingReservationId;
        data["foodId"] = this.foodId;
        data["foodName"] = this.foodName;
        data["foodDescription"] = this.foodDescription;
        data["currentPrice"] = this.currentPrice;
        data["currentQuantity"] = this.currentQuantity;
        data["currentTotal"] = this.currentTotal;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllDraftCartItemsQueryDtoByCode {
    id?: number | undefined;
    uniqueId?: string | undefined;
    bookingReservationId?: string | undefined;
    foodId?: number | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    currentPrice?: number | undefined;
    currentQuantity?: number | undefined;
    currentTotal?: number | undefined;
    isActive?: boolean | undefined;
}

export class GetAllFlightQueryDto implements IGetAllFlightQueryDto {
    id?: number | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllFlightQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flightCode = _data["flightCode"];
            this.airportId = _data["airportId"];
            this.planeId = _data["planeId"];
            this.airportName = _data["airportName"];
            this.planeName = _data["planeName"];
            this.uniqueId = _data["uniqueId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllFlightQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFlightQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flightCode"] = this.flightCode;
        data["airportId"] = this.airportId;
        data["planeId"] = this.planeId;
        data["airportName"] = this.airportName;
        data["planeName"] = this.planeName;
        data["uniqueId"] = this.uniqueId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllFlightQueryDto {
    id?: number | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetFlightByIdQueryDto implements IResultOfGetFlightByIdQueryDto {
    data?: GetFlightByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetFlightByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetFlightByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetFlightByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetFlightByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetFlightByIdQueryDto {
    data?: GetFlightByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetFlightByIdQueryDto implements IGetFlightByIdQueryDto {
    id?: number | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetFlightByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flightCode = _data["flightCode"];
            this.airportId = _data["airportId"];
            this.planeId = _data["planeId"];
            this.uniqueId = _data["uniqueId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetFlightByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFlightByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flightCode"] = this.flightCode;
        data["airportId"] = this.airportId;
        data["planeId"] = this.planeId;
        data["uniqueId"] = this.uniqueId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetFlightByIdQueryDto {
    id?: number | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetFlightNameQueryDto implements IGetFlightNameQueryDto {
    id?: number | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetFlightNameQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flightCode = _data["flightCode"];
            this.airportId = _data["airportId"];
            this.planeId = _data["planeId"];
            this.airportName = _data["airportName"];
            this.planeName = _data["planeName"];
            this.uniqueId = _data["uniqueId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetFlightNameQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFlightNameQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flightCode"] = this.flightCode;
        data["airportId"] = this.airportId;
        data["planeId"] = this.planeId;
        data["airportName"] = this.airportName;
        data["planeName"] = this.planeName;
        data["uniqueId"] = this.uniqueId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetFlightNameQueryDto {
    id?: number | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    airportName?: string | undefined;
    planeName?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateFlightCommandDto implements IResultOfCreateFlightCommandDto {
    data?: CreateFlightCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateFlightCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateFlightCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateFlightCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateFlightCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateFlightCommandDto {
    data?: CreateFlightCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateFlightCommandDto implements ICreateFlightCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateFlightCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateFlightCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFlightCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateFlightCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateFlightCommand implements ICreateFlightCommand {
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;

    constructor(data?: ICreateFlightCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.flightCode = _data["flightCode"];
            this.airportId = _data["airportId"];
            this.planeId = _data["planeId"];
        }
    }

    static fromJS(data: any): CreateFlightCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFlightCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flightCode"] = this.flightCode;
        data["airportId"] = this.airportId;
        data["planeId"] = this.planeId;
        return data;
    }
}

export interface ICreateFlightCommand {
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
}

export class ResultOfUpdateFlightCommandDto implements IResultOfUpdateFlightCommandDto {
    data?: UpdateFlightCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateFlightCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateFlightCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateFlightCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateFlightCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateFlightCommandDto {
    data?: UpdateFlightCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateFlightCommandDto implements IUpdateFlightCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateFlightCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateFlightCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFlightCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateFlightCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateFlightCommand implements IUpdateFlightCommand {
    uniqueId?: string | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateFlightCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.flightCode = _data["flightCode"];
            this.airportId = _data["airportId"];
            this.planeId = _data["planeId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateFlightCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFlightCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["flightCode"] = this.flightCode;
        data["airportId"] = this.airportId;
        data["planeId"] = this.planeId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateFlightCommand {
    uniqueId?: string | undefined;
    flightCode?: string | undefined;
    airportId?: number | undefined;
    planeId?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateFoodCommandDto implements IResultOfCreateFoodCommandDto {
    data?: CreateFoodCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateFoodCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateFoodCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateFoodCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateFoodCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateFoodCommandDto {
    data?: CreateFoodCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateFoodCommandDto implements ICreateFoodCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateFoodCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateFoodCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFoodCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateFoodCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateFoodCommand implements ICreateFoodCommand {
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateFoodCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.foodName = _data["foodName"];
            this.foodDescription = _data["foodDescription"];
            this.foodPrice = _data["foodPrice"];
            this.foodCategoryId = _data["foodCategoryId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateFoodCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFoodCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["foodName"] = this.foodName;
        data["foodDescription"] = this.foodDescription;
        data["foodPrice"] = this.foodPrice;
        data["foodCategoryId"] = this.foodCategoryId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateFoodCommand {
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateFoodCommandDto implements IResultOfUpdateFoodCommandDto {
    data?: UpdateFoodCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateFoodCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateFoodCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateFoodCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateFoodCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateFoodCommandDto {
    data?: UpdateFoodCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateFoodCommandDto implements IUpdateFoodCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateFoodCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateFoodCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoodCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateFoodCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateFoodCommand implements IUpdateFoodCommand {
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateFoodCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.foodName = _data["foodName"];
            this.foodDescription = _data["foodDescription"];
            this.foodPrice = _data["foodPrice"];
            this.foodCategoryId = _data["foodCategoryId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateFoodCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoodCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["foodName"] = this.foodName;
        data["foodDescription"] = this.foodDescription;
        data["foodPrice"] = this.foodPrice;
        data["foodCategoryId"] = this.foodCategoryId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateFoodCommand {
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    isActive?: boolean | undefined;
}

export class GetAllFoodQueryDto implements IGetAllFoodQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    foodCategoryName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllFoodQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.foodName = _data["foodName"];
            this.foodDescription = _data["foodDescription"];
            this.foodPrice = _data["foodPrice"];
            this.foodCategoryId = _data["foodCategoryId"];
            this.foodCategoryName = _data["foodCategoryName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllFoodQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFoodQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["foodName"] = this.foodName;
        data["foodDescription"] = this.foodDescription;
        data["foodPrice"] = this.foodPrice;
        data["foodCategoryId"] = this.foodCategoryId;
        data["foodCategoryName"] = this.foodCategoryName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllFoodQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    foodCategoryName?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllFoodByCategoryIdQueryDto implements IGetAllFoodByCategoryIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    foodCategoryName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllFoodByCategoryIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.foodName = _data["foodName"];
            this.foodDescription = _data["foodDescription"];
            this.foodPrice = _data["foodPrice"];
            this.foodCategoryId = _data["foodCategoryId"];
            this.foodCategoryName = _data["foodCategoryName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllFoodByCategoryIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFoodByCategoryIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["foodName"] = this.foodName;
        data["foodDescription"] = this.foodDescription;
        data["foodPrice"] = this.foodPrice;
        data["foodCategoryId"] = this.foodCategoryId;
        data["foodCategoryName"] = this.foodCategoryName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllFoodByCategoryIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    foodCategoryName?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllFoodByIdQueryDto implements IResultOfGetAllFoodByIdQueryDto {
    data?: GetAllFoodByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllFoodByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllFoodByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllFoodByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllFoodByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllFoodByIdQueryDto {
    data?: GetAllFoodByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllFoodByIdQueryDto implements IGetAllFoodByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    foodCategoryName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllFoodByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.foodName = _data["foodName"];
            this.foodDescription = _data["foodDescription"];
            this.foodPrice = _data["foodPrice"];
            this.foodCategoryId = _data["foodCategoryId"];
            this.foodCategoryName = _data["foodCategoryName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllFoodByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFoodByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["foodName"] = this.foodName;
        data["foodDescription"] = this.foodDescription;
        data["foodPrice"] = this.foodPrice;
        data["foodCategoryId"] = this.foodCategoryId;
        data["foodCategoryName"] = this.foodCategoryName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllFoodByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    foodName?: string | undefined;
    foodDescription?: string | undefined;
    foodPrice?: number | undefined;
    foodCategoryId?: number | undefined;
    foodCategoryName?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllPlanesQueryDto implements IGetAllPlanesQueryDto {
    id?: number | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllPlanesQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.airlineName = _data["airlineName"];
            this.code = _data["code"];
            this.model = _data["model"];
            this.uniqueId = _data["uniqueId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllPlanesQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllPlanesQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["airlineName"] = this.airlineName;
        data["code"] = this.code;
        data["model"] = this.model;
        data["uniqueId"] = this.uniqueId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllPlanesQueryDto {
    id?: number | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetPlaneByIdQueryDto implements IResultOfGetPlaneByIdQueryDto {
    data?: GetPlaneByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetPlaneByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetPlaneByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetPlaneByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetPlaneByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetPlaneByIdQueryDto {
    data?: GetPlaneByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetPlaneByIdQueryDto implements IGetPlaneByIdQueryDto {
    id?: number | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetPlaneByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.airlineName = _data["airlineName"];
            this.code = _data["code"];
            this.model = _data["model"];
            this.uniqueId = _data["uniqueId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetPlaneByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlaneByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["airlineName"] = this.airlineName;
        data["code"] = this.code;
        data["model"] = this.model;
        data["uniqueId"] = this.uniqueId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetPlaneByIdQueryDto {
    id?: number | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetPlaneByNameQueryDto implements IGetPlaneByNameQueryDto {
    id?: number | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetPlaneByNameQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.airlineName = _data["airlineName"];
            this.code = _data["code"];
            this.model = _data["model"];
            this.uniqueId = _data["uniqueId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetPlaneByNameQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlaneByNameQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["airlineName"] = this.airlineName;
        data["code"] = this.code;
        data["model"] = this.model;
        data["uniqueId"] = this.uniqueId;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetPlaneByNameQueryDto {
    id?: number | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    uniqueId?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateAirlineCommandDto implements IResultOfCreateAirlineCommandDto {
    data?: CreateAirlineCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateAirlineCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateAirlineCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateAirlineCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateAirlineCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateAirlineCommandDto {
    data?: CreateAirlineCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateAirlineCommandDto implements ICreateAirlineCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateAirlineCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateAirlineCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAirlineCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateAirlineCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateAirlineCommand implements ICreateAirlineCommand {
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;

    constructor(data?: ICreateAirlineCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.airlineName = _data["airlineName"];
            this.code = _data["code"];
            this.model = _data["model"];
        }
    }

    static fromJS(data: any): CreateAirlineCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAirlineCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["airlineName"] = this.airlineName;
        data["code"] = this.code;
        data["model"] = this.model;
        return data;
    }
}

export interface ICreateAirlineCommand {
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
}

export class ResultOfUpdateAirlineCommandDto implements IResultOfUpdateAirlineCommandDto {
    data?: UpdateAirlineCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateAirlineCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateAirlineCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateAirlineCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateAirlineCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateAirlineCommandDto {
    data?: UpdateAirlineCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateAirlineCommandDto implements IUpdateAirlineCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateAirlineCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateAirlineCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAirlineCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateAirlineCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateAirlineCommand implements IUpdateAirlineCommand {
    uniqueId?: string | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateAirlineCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.airlineName = _data["airlineName"];
            this.code = _data["code"];
            this.model = _data["model"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateAirlineCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAirlineCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["airlineName"] = this.airlineName;
        data["code"] = this.code;
        data["model"] = this.model;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateAirlineCommand {
    uniqueId?: string | undefined;
    airlineName?: string | undefined;
    code?: string | undefined;
    model?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreatePromoCommandDto implements IResultOfCreatePromoCommandDto {
    data?: CreatePromoCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreatePromoCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreatePromoCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreatePromoCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreatePromoCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreatePromoCommandDto {
    data?: CreatePromoCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreatePromoCommandDto implements ICreatePromoCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreatePromoCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreatePromoCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePromoCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreatePromoCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreatePromoCommand implements ICreatePromoCommand {
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreatePromoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.promoCode = _data["promoCode"];
            this.promoName = _data["promoName"];
            this.promoDescription = _data["promoDescription"];
            this.promoPrice = _data["promoPrice"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreatePromoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePromoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["promoCode"] = this.promoCode;
        data["promoName"] = this.promoName;
        data["promoDescription"] = this.promoDescription;
        data["promoPrice"] = this.promoPrice;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreatePromoCommand {
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdatePromoCommandDto implements IResultOfUpdatePromoCommandDto {
    data?: UpdatePromoCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdatePromoCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdatePromoCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdatePromoCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdatePromoCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdatePromoCommandDto {
    data?: UpdatePromoCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdatePromoCommandDto implements IUpdatePromoCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdatePromoCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdatePromoCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePromoCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdatePromoCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdatePromoCommand implements IUpdatePromoCommand {
    uniqueId?: string | undefined;
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdatePromoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.promoCode = _data["promoCode"];
            this.promoName = _data["promoName"];
            this.promoDescription = _data["promoDescription"];
            this.promoPrice = _data["promoPrice"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdatePromoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePromoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["promoCode"] = this.promoCode;
        data["promoName"] = this.promoName;
        data["promoDescription"] = this.promoDescription;
        data["promoPrice"] = this.promoPrice;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdatePromoCommand {
    uniqueId?: string | undefined;
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;
}

export class GetAllPromoQueryDto implements IGetAllPromoQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllPromoQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.promoCode = _data["promoCode"];
            this.promoName = _data["promoName"];
            this.promoDescription = _data["promoDescription"];
            this.promoPrice = _data["promoPrice"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllPromoQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllPromoQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["promoCode"] = this.promoCode;
        data["promoName"] = this.promoName;
        data["promoDescription"] = this.promoDescription;
        data["promoPrice"] = this.promoPrice;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllPromoQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllPromoByIdQueryDto implements IResultOfGetAllPromoByIdQueryDto {
    data?: GetAllPromoByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllPromoByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllPromoByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllPromoByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllPromoByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllPromoByIdQueryDto {
    data?: GetAllPromoByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllPromoByIdQueryDto implements IGetAllPromoByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllPromoByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.promoCode = _data["promoCode"];
            this.promoName = _data["promoName"];
            this.promoDescription = _data["promoDescription"];
            this.promoPrice = _data["promoPrice"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllPromoByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllPromoByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["promoCode"] = this.promoCode;
        data["promoName"] = this.promoName;
        data["promoDescription"] = this.promoDescription;
        data["promoPrice"] = this.promoPrice;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllPromoByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    promoCode?: string | undefined;
    promoName?: string | undefined;
    promoDescription?: string | undefined;
    promoPrice?: number | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateRestaurantBookingCommandDto implements IResultOfCreateRestaurantBookingCommandDto {
    data?: CreateRestaurantBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateRestaurantBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateRestaurantBookingCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateRestaurantBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateRestaurantBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateRestaurantBookingCommandDto {
    data?: CreateRestaurantBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateRestaurantBookingCommandDto implements ICreateRestaurantBookingCommandDto {
    id?: string | undefined;
    createdDate?: Date;
    primaryId?: number | undefined;

    constructor(data?: ICreateRestaurantBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.primaryId = _data["primaryId"];
        }
    }

    static fromJS(data: any): CreateRestaurantBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["primaryId"] = this.primaryId;
        return data;
    }
}

export interface ICreateRestaurantBookingCommandDto {
    id?: string | undefined;
    createdDate?: Date;
    primaryId?: number | undefined;
}

export class CreateRestaurantBookingCommand implements ICreateRestaurantBookingCommand {
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
    numberOfPax?: number | undefined;

    constructor(data?: ICreateRestaurantBookingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bookingReferrenceNumber = _data["bookingReferrenceNumber"];
            this.bookingFromDate = _data["bookingFromDate"];
            this.bookingToDate = _data["bookingToDate"];
            this.bookingSource = _data["bookingSource"];
            this.bookingEstimatedArrivalTime = _data["bookingEstimatedArrivalTime"];
            this.bookingEstimatedDepartureTime = _data["bookingEstimatedDepartureTime"];
            this.bookingStatusID = _data["bookingStatusID"];
            this.bookingPaymentStatusID = _data["bookingPaymentStatusID"];
            this.bookingChargesAmount = _data["bookingChargesAmount"];
            this.bookingExtrasAmount = _data["bookingExtrasAmount"];
            this.bookingPromoAmount = _data["bookingPromoAmount"];
            this.bookingTaxAmount = _data["bookingTaxAmount"];
            this.bookingPaymentSurchargeAmount = _data["bookingPaymentSurchargeAmount"];
            this.bookingTotalAmount = _data["bookingTotalAmount"];
            this.bookingPaidAmount = _data["bookingPaidAmount"];
            this.bookingOutstandingBalanceAmount = _data["bookingOutstandingBalanceAmount"];
            this.bookingNotes = _data["bookingNotes"];
            this.paymentMethod = _data["paymentMethod"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.orderID = _data["orderID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
            this.numberOfPax = _data["numberOfPax"];
        }
    }

    static fromJS(data: any): CreateRestaurantBookingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantBookingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingReferrenceNumber"] = this.bookingReferrenceNumber;
        data["bookingFromDate"] = this.bookingFromDate;
        data["bookingToDate"] = this.bookingToDate;
        data["bookingSource"] = this.bookingSource;
        data["bookingEstimatedArrivalTime"] = this.bookingEstimatedArrivalTime;
        data["bookingEstimatedDepartureTime"] = this.bookingEstimatedDepartureTime;
        data["bookingStatusID"] = this.bookingStatusID;
        data["bookingPaymentStatusID"] = this.bookingPaymentStatusID;
        data["bookingChargesAmount"] = this.bookingChargesAmount;
        data["bookingExtrasAmount"] = this.bookingExtrasAmount;
        data["bookingPromoAmount"] = this.bookingPromoAmount;
        data["bookingTaxAmount"] = this.bookingTaxAmount;
        data["bookingPaymentSurchargeAmount"] = this.bookingPaymentSurchargeAmount;
        data["bookingTotalAmount"] = this.bookingTotalAmount;
        data["bookingPaidAmount"] = this.bookingPaidAmount;
        data["bookingOutstandingBalanceAmount"] = this.bookingOutstandingBalanceAmount;
        data["bookingNotes"] = this.bookingNotes;
        data["paymentMethod"] = this.paymentMethod;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["orderID"] = this.orderID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        data["numberOfPax"] = this.numberOfPax;
        return data;
    }
}

export interface ICreateRestaurantBookingCommand {
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
    numberOfPax?: number | undefined;
}

export class ResultOfUpdateRestaurantBookingCommandDto implements IResultOfUpdateRestaurantBookingCommandDto {
    data?: UpdateRestaurantBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateRestaurantBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateRestaurantBookingCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateRestaurantBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateRestaurantBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateRestaurantBookingCommandDto {
    data?: UpdateRestaurantBookingCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateRestaurantBookingCommandDto implements IUpdateRestaurantBookingCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
    primaryId?: number | undefined;

    constructor(data?: IUpdateRestaurantBookingCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            this.primaryId = _data["primaryId"];
        }
    }

    static fromJS(data: any): UpdateRestaurantBookingCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantBookingCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["primaryId"] = this.primaryId;
        return data;
    }
}

export interface IUpdateRestaurantBookingCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
    primaryId?: number | undefined;
}

export class UpdateRestaurantBookingCommand implements IUpdateRestaurantBookingCommand {
    uniqueId?: string | undefined;
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    isActive?: boolean | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    numberOfPax?: number | undefined;

    constructor(data?: IUpdateRestaurantBookingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.bookingReferrenceNumber = _data["bookingReferrenceNumber"];
            this.bookingFromDate = _data["bookingFromDate"];
            this.bookingToDate = _data["bookingToDate"];
            this.bookingSource = _data["bookingSource"];
            this.bookingEstimatedArrivalTime = _data["bookingEstimatedArrivalTime"];
            this.bookingEstimatedDepartureTime = _data["bookingEstimatedDepartureTime"];
            this.bookingStatusID = _data["bookingStatusID"];
            this.bookingPaymentStatusID = _data["bookingPaymentStatusID"];
            this.bookingChargesAmount = _data["bookingChargesAmount"];
            this.bookingExtrasAmount = _data["bookingExtrasAmount"];
            this.bookingPromoAmount = _data["bookingPromoAmount"];
            this.bookingTaxAmount = _data["bookingTaxAmount"];
            this.bookingPaymentSurchargeAmount = _data["bookingPaymentSurchargeAmount"];
            this.bookingTotalAmount = _data["bookingTotalAmount"];
            this.bookingPaidAmount = _data["bookingPaidAmount"];
            this.bookingOutstandingBalanceAmount = _data["bookingOutstandingBalanceAmount"];
            this.bookingNotes = _data["bookingNotes"];
            this.paymentMethod = _data["paymentMethod"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.orderID = _data["orderID"];
            this.isActive = _data["isActive"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.numberOfPax = _data["numberOfPax"];
        }
    }

    static fromJS(data: any): UpdateRestaurantBookingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantBookingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["bookingReferrenceNumber"] = this.bookingReferrenceNumber;
        data["bookingFromDate"] = this.bookingFromDate;
        data["bookingToDate"] = this.bookingToDate;
        data["bookingSource"] = this.bookingSource;
        data["bookingEstimatedArrivalTime"] = this.bookingEstimatedArrivalTime;
        data["bookingEstimatedDepartureTime"] = this.bookingEstimatedDepartureTime;
        data["bookingStatusID"] = this.bookingStatusID;
        data["bookingPaymentStatusID"] = this.bookingPaymentStatusID;
        data["bookingChargesAmount"] = this.bookingChargesAmount;
        data["bookingExtrasAmount"] = this.bookingExtrasAmount;
        data["bookingPromoAmount"] = this.bookingPromoAmount;
        data["bookingTaxAmount"] = this.bookingTaxAmount;
        data["bookingPaymentSurchargeAmount"] = this.bookingPaymentSurchargeAmount;
        data["bookingTotalAmount"] = this.bookingTotalAmount;
        data["bookingPaidAmount"] = this.bookingPaidAmount;
        data["bookingOutstandingBalanceAmount"] = this.bookingOutstandingBalanceAmount;
        data["bookingNotes"] = this.bookingNotes;
        data["paymentMethod"] = this.paymentMethod;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["orderID"] = this.orderID;
        data["isActive"] = this.isActive;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["numberOfPax"] = this.numberOfPax;
        return data;
    }
}

export interface IUpdateRestaurantBookingCommand {
    uniqueId?: string | undefined;
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    isActive?: boolean | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    numberOfPax?: number | undefined;
}

export class GetAllRestaurantBookingQueryDto implements IGetAllRestaurantBookingQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
    numberOfPax?: number | undefined;

    constructor(data?: IGetAllRestaurantBookingQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.bookingReferrenceNumber = _data["bookingReferrenceNumber"];
            this.bookingFromDate = _data["bookingFromDate"];
            this.bookingToDate = _data["bookingToDate"];
            this.bookingSource = _data["bookingSource"];
            this.bookingEstimatedArrivalTime = _data["bookingEstimatedArrivalTime"];
            this.bookingEstimatedDepartureTime = _data["bookingEstimatedDepartureTime"];
            this.bookingStatusID = _data["bookingStatusID"];
            this.bookingPaymentStatusID = _data["bookingPaymentStatusID"];
            this.bookingChargesAmount = _data["bookingChargesAmount"];
            this.bookingExtrasAmount = _data["bookingExtrasAmount"];
            this.bookingPromoAmount = _data["bookingPromoAmount"];
            this.bookingTaxAmount = _data["bookingTaxAmount"];
            this.bookingPaymentSurchargeAmount = _data["bookingPaymentSurchargeAmount"];
            this.bookingTotalAmount = _data["bookingTotalAmount"];
            this.bookingPaidAmount = _data["bookingPaidAmount"];
            this.bookingOutstandingBalanceAmount = _data["bookingOutstandingBalanceAmount"];
            this.bookingNotes = _data["bookingNotes"];
            this.paymentMethod = _data["paymentMethod"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.orderID = _data["orderID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
            this.numberOfPax = _data["numberOfPax"];
        }
    }

    static fromJS(data: any): GetAllRestaurantBookingQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantBookingQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["bookingReferrenceNumber"] = this.bookingReferrenceNumber;
        data["bookingFromDate"] = this.bookingFromDate;
        data["bookingToDate"] = this.bookingToDate;
        data["bookingSource"] = this.bookingSource;
        data["bookingEstimatedArrivalTime"] = this.bookingEstimatedArrivalTime;
        data["bookingEstimatedDepartureTime"] = this.bookingEstimatedDepartureTime;
        data["bookingStatusID"] = this.bookingStatusID;
        data["bookingPaymentStatusID"] = this.bookingPaymentStatusID;
        data["bookingChargesAmount"] = this.bookingChargesAmount;
        data["bookingExtrasAmount"] = this.bookingExtrasAmount;
        data["bookingPromoAmount"] = this.bookingPromoAmount;
        data["bookingTaxAmount"] = this.bookingTaxAmount;
        data["bookingPaymentSurchargeAmount"] = this.bookingPaymentSurchargeAmount;
        data["bookingTotalAmount"] = this.bookingTotalAmount;
        data["bookingPaidAmount"] = this.bookingPaidAmount;
        data["bookingOutstandingBalanceAmount"] = this.bookingOutstandingBalanceAmount;
        data["bookingNotes"] = this.bookingNotes;
        data["paymentMethod"] = this.paymentMethod;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["orderID"] = this.orderID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        data["numberOfPax"] = this.numberOfPax;
        return data;
    }
}

export interface IGetAllRestaurantBookingQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
    numberOfPax?: number | undefined;
}

export class ResultOfGetAllRestaurantBookingByIdQueryDto implements IResultOfGetAllRestaurantBookingByIdQueryDto {
    data?: GetAllRestaurantBookingByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllRestaurantBookingByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllRestaurantBookingByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllRestaurantBookingByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllRestaurantBookingByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllRestaurantBookingByIdQueryDto {
    data?: GetAllRestaurantBookingByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllRestaurantBookingByIdQueryDto implements IGetAllRestaurantBookingByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
    numberOfPax?: number | undefined;

    constructor(data?: IGetAllRestaurantBookingByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.bookingReferrenceNumber = _data["bookingReferrenceNumber"];
            this.bookingFromDate = _data["bookingFromDate"];
            this.bookingToDate = _data["bookingToDate"];
            this.bookingSource = _data["bookingSource"];
            this.bookingEstimatedArrivalTime = _data["bookingEstimatedArrivalTime"];
            this.bookingEstimatedDepartureTime = _data["bookingEstimatedDepartureTime"];
            this.bookingStatusID = _data["bookingStatusID"];
            this.bookingPaymentStatusID = _data["bookingPaymentStatusID"];
            this.bookingChargesAmount = _data["bookingChargesAmount"];
            this.bookingExtrasAmount = _data["bookingExtrasAmount"];
            this.bookingPromoAmount = _data["bookingPromoAmount"];
            this.bookingTaxAmount = _data["bookingTaxAmount"];
            this.bookingPaymentSurchargeAmount = _data["bookingPaymentSurchargeAmount"];
            this.bookingTotalAmount = _data["bookingTotalAmount"];
            this.bookingPaidAmount = _data["bookingPaidAmount"];
            this.bookingOutstandingBalanceAmount = _data["bookingOutstandingBalanceAmount"];
            this.bookingNotes = _data["bookingNotes"];
            this.paymentMethod = _data["paymentMethod"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.orderID = _data["orderID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
            this.numberOfPax = _data["numberOfPax"];
        }
    }

    static fromJS(data: any): GetAllRestaurantBookingByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantBookingByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["bookingReferrenceNumber"] = this.bookingReferrenceNumber;
        data["bookingFromDate"] = this.bookingFromDate;
        data["bookingToDate"] = this.bookingToDate;
        data["bookingSource"] = this.bookingSource;
        data["bookingEstimatedArrivalTime"] = this.bookingEstimatedArrivalTime;
        data["bookingEstimatedDepartureTime"] = this.bookingEstimatedDepartureTime;
        data["bookingStatusID"] = this.bookingStatusID;
        data["bookingPaymentStatusID"] = this.bookingPaymentStatusID;
        data["bookingChargesAmount"] = this.bookingChargesAmount;
        data["bookingExtrasAmount"] = this.bookingExtrasAmount;
        data["bookingPromoAmount"] = this.bookingPromoAmount;
        data["bookingTaxAmount"] = this.bookingTaxAmount;
        data["bookingPaymentSurchargeAmount"] = this.bookingPaymentSurchargeAmount;
        data["bookingTotalAmount"] = this.bookingTotalAmount;
        data["bookingPaidAmount"] = this.bookingPaidAmount;
        data["bookingOutstandingBalanceAmount"] = this.bookingOutstandingBalanceAmount;
        data["bookingNotes"] = this.bookingNotes;
        data["paymentMethod"] = this.paymentMethod;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["orderID"] = this.orderID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        data["numberOfPax"] = this.numberOfPax;
        return data;
    }
}

export interface IGetAllRestaurantBookingByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    bookingReferrenceNumber?: string | undefined;
    bookingFromDate?: string | undefined;
    bookingToDate?: string | undefined;
    bookingSource?: string | undefined;
    bookingEstimatedArrivalTime?: string | undefined;
    bookingEstimatedDepartureTime?: string | undefined;
    bookingStatusID?: number | undefined;
    bookingPaymentStatusID?: number | undefined;
    bookingChargesAmount?: number | undefined;
    bookingExtrasAmount?: number | undefined;
    bookingPromoAmount?: number | undefined;
    bookingTaxAmount?: number | undefined;
    bookingPaymentSurchargeAmount?: number | undefined;
    bookingTotalAmount?: number | undefined;
    bookingPaidAmount?: number | undefined;
    bookingOutstandingBalanceAmount?: number | undefined;
    bookingNotes?: string | undefined;
    paymentMethod?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    orderID?: number | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
    numberOfPax?: number | undefined;
}

export class ResultOfCreateRestaurantOrderCommandDto implements IResultOfCreateRestaurantOrderCommandDto {
    data?: CreateRestaurantOrderCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateRestaurantOrderCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateRestaurantOrderCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateRestaurantOrderCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateRestaurantOrderCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateRestaurantOrderCommandDto {
    data?: CreateRestaurantOrderCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateRestaurantOrderCommandDto implements ICreateRestaurantOrderCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateRestaurantOrderCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateRestaurantOrderCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantOrderCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateRestaurantOrderCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateRestaurantOrderCommand implements ICreateRestaurantOrderCommand {
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateRestaurantOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderReferrenceNumber = _data["orderReferrenceNumber"];
            this.orderSource = _data["orderSource"];
            this.orderStatusID = _data["orderStatusID"];
            this.orderPaymentStatusID = _data["orderPaymentStatusID"];
            this.orderChargesAmount = _data["orderChargesAmount"];
            this.orderExtrasAmount = _data["orderExtrasAmount"];
            this.orderPromoAmount = _data["orderPromoAmount"];
            this.orderTaxAmount = _data["orderTaxAmount"];
            this.orderPaymentSurchargeAmount = _data["orderPaymentSurchargeAmount"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderPaidAmount = _data["orderPaidAmount"];
            this.orderOutstandingBalanceAmount = _data["orderOutstandingBalanceAmount"];
            this.orderNotes = _data["orderNotes"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateRestaurantOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderReferrenceNumber"] = this.orderReferrenceNumber;
        data["orderSource"] = this.orderSource;
        data["orderStatusID"] = this.orderStatusID;
        data["orderPaymentStatusID"] = this.orderPaymentStatusID;
        data["orderChargesAmount"] = this.orderChargesAmount;
        data["orderExtrasAmount"] = this.orderExtrasAmount;
        data["orderPromoAmount"] = this.orderPromoAmount;
        data["orderTaxAmount"] = this.orderTaxAmount;
        data["orderPaymentSurchargeAmount"] = this.orderPaymentSurchargeAmount;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderPaidAmount"] = this.orderPaidAmount;
        data["orderOutstandingBalanceAmount"] = this.orderOutstandingBalanceAmount;
        data["orderNotes"] = this.orderNotes;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateRestaurantOrderCommand {
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateRestaurantOrderCommandDto implements IResultOfUpdateRestaurantOrderCommandDto {
    data?: UpdateRestaurantOrderCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateRestaurantOrderCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateRestaurantOrderCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateRestaurantOrderCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateRestaurantOrderCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateRestaurantOrderCommandDto {
    data?: UpdateRestaurantOrderCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateRestaurantOrderCommandDto implements IUpdateRestaurantOrderCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateRestaurantOrderCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateRestaurantOrderCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantOrderCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateRestaurantOrderCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateRestaurantOrderCommand implements IUpdateRestaurantOrderCommand {
    uniqueId?: string | undefined;
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateRestaurantOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.orderReferrenceNumber = _data["orderReferrenceNumber"];
            this.orderSource = _data["orderSource"];
            this.orderStatusID = _data["orderStatusID"];
            this.orderPaymentStatusID = _data["orderPaymentStatusID"];
            this.orderChargesAmount = _data["orderChargesAmount"];
            this.orderExtrasAmount = _data["orderExtrasAmount"];
            this.orderPromoAmount = _data["orderPromoAmount"];
            this.orderTaxAmount = _data["orderTaxAmount"];
            this.orderPaymentSurchargeAmount = _data["orderPaymentSurchargeAmount"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderPaidAmount = _data["orderPaidAmount"];
            this.orderOutstandingBalanceAmount = _data["orderOutstandingBalanceAmount"];
            this.orderNotes = _data["orderNotes"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateRestaurantOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["orderReferrenceNumber"] = this.orderReferrenceNumber;
        data["orderSource"] = this.orderSource;
        data["orderStatusID"] = this.orderStatusID;
        data["orderPaymentStatusID"] = this.orderPaymentStatusID;
        data["orderChargesAmount"] = this.orderChargesAmount;
        data["orderExtrasAmount"] = this.orderExtrasAmount;
        data["orderPromoAmount"] = this.orderPromoAmount;
        data["orderTaxAmount"] = this.orderTaxAmount;
        data["orderPaymentSurchargeAmount"] = this.orderPaymentSurchargeAmount;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderPaidAmount"] = this.orderPaidAmount;
        data["orderOutstandingBalanceAmount"] = this.orderOutstandingBalanceAmount;
        data["orderNotes"] = this.orderNotes;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateRestaurantOrderCommand {
    uniqueId?: string | undefined;
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllRestaurantOrderQueryDto implements IGetAllRestaurantOrderQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllRestaurantOrderQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.orderReferrenceNumber = _data["orderReferrenceNumber"];
            this.orderSource = _data["orderSource"];
            this.orderStatusID = _data["orderStatusID"];
            this.orderPaymentStatusID = _data["orderPaymentStatusID"];
            this.orderChargesAmount = _data["orderChargesAmount"];
            this.orderExtrasAmount = _data["orderExtrasAmount"];
            this.orderPromoAmount = _data["orderPromoAmount"];
            this.orderTaxAmount = _data["orderTaxAmount"];
            this.orderPaymentSurchargeAmount = _data["orderPaymentSurchargeAmount"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderPaidAmount = _data["orderPaidAmount"];
            this.orderOutstandingBalanceAmount = _data["orderOutstandingBalanceAmount"];
            this.orderNotes = _data["orderNotes"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllRestaurantOrderQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantOrderQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["orderReferrenceNumber"] = this.orderReferrenceNumber;
        data["orderSource"] = this.orderSource;
        data["orderStatusID"] = this.orderStatusID;
        data["orderPaymentStatusID"] = this.orderPaymentStatusID;
        data["orderChargesAmount"] = this.orderChargesAmount;
        data["orderExtrasAmount"] = this.orderExtrasAmount;
        data["orderPromoAmount"] = this.orderPromoAmount;
        data["orderTaxAmount"] = this.orderTaxAmount;
        data["orderPaymentSurchargeAmount"] = this.orderPaymentSurchargeAmount;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderPaidAmount"] = this.orderPaidAmount;
        data["orderOutstandingBalanceAmount"] = this.orderOutstandingBalanceAmount;
        data["orderNotes"] = this.orderNotes;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllRestaurantOrderQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllRestaurantOrderByIdQueryDto implements IResultOfGetAllRestaurantOrderByIdQueryDto {
    data?: GetAllRestaurantOrderByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllRestaurantOrderByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllRestaurantOrderByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllRestaurantOrderByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllRestaurantOrderByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllRestaurantOrderByIdQueryDto {
    data?: GetAllRestaurantOrderByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllRestaurantOrderByIdQueryDto implements IGetAllRestaurantOrderByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllRestaurantOrderByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.orderReferrenceNumber = _data["orderReferrenceNumber"];
            this.orderSource = _data["orderSource"];
            this.orderStatusID = _data["orderStatusID"];
            this.orderPaymentStatusID = _data["orderPaymentStatusID"];
            this.orderChargesAmount = _data["orderChargesAmount"];
            this.orderExtrasAmount = _data["orderExtrasAmount"];
            this.orderPromoAmount = _data["orderPromoAmount"];
            this.orderTaxAmount = _data["orderTaxAmount"];
            this.orderPaymentSurchargeAmount = _data["orderPaymentSurchargeAmount"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderPaidAmount = _data["orderPaidAmount"];
            this.orderOutstandingBalanceAmount = _data["orderOutstandingBalanceAmount"];
            this.orderNotes = _data["orderNotes"];
            this.restaurantID = _data["restaurantID"];
            this.guestID = _data["guestID"];
            this.guestName = _data["guestName"];
            this.restaurantName = _data["restaurantName"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllRestaurantOrderByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantOrderByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["orderReferrenceNumber"] = this.orderReferrenceNumber;
        data["orderSource"] = this.orderSource;
        data["orderStatusID"] = this.orderStatusID;
        data["orderPaymentStatusID"] = this.orderPaymentStatusID;
        data["orderChargesAmount"] = this.orderChargesAmount;
        data["orderExtrasAmount"] = this.orderExtrasAmount;
        data["orderPromoAmount"] = this.orderPromoAmount;
        data["orderTaxAmount"] = this.orderTaxAmount;
        data["orderPaymentSurchargeAmount"] = this.orderPaymentSurchargeAmount;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderPaidAmount"] = this.orderPaidAmount;
        data["orderOutstandingBalanceAmount"] = this.orderOutstandingBalanceAmount;
        data["orderNotes"] = this.orderNotes;
        data["restaurantID"] = this.restaurantID;
        data["guestID"] = this.guestID;
        data["guestName"] = this.guestName;
        data["restaurantName"] = this.restaurantName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllRestaurantOrderByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    orderReferrenceNumber?: string | undefined;
    orderSource?: string | undefined;
    orderStatusID?: number | undefined;
    orderPaymentStatusID?: number | undefined;
    orderChargesAmount?: number | undefined;
    orderExtrasAmount?: number | undefined;
    orderPromoAmount?: number | undefined;
    orderTaxAmount?: number | undefined;
    orderPaymentSurchargeAmount?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderPaidAmount?: number | undefined;
    orderOutstandingBalanceAmount?: number | undefined;
    orderNotes?: string | undefined;
    restaurantID?: number | undefined;
    guestID?: string | undefined;
    guestName?: string | undefined;
    restaurantName?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateRestaurantOrderDetailCommandDto implements IResultOfCreateRestaurantOrderDetailCommandDto {
    data?: CreateRestaurantOrderDetailCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateRestaurantOrderDetailCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateRestaurantOrderDetailCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateRestaurantOrderDetailCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateRestaurantOrderDetailCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateRestaurantOrderDetailCommandDto {
    data?: CreateRestaurantOrderDetailCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateRestaurantOrderDetailCommandDto implements ICreateRestaurantOrderDetailCommandDto {
    id?: string | undefined;
    createdDate?: Date;
    primaryId?: number | undefined;

    constructor(data?: ICreateRestaurantOrderDetailCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.primaryId = _data["primaryId"];
        }
    }

    static fromJS(data: any): CreateRestaurantOrderDetailCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantOrderDetailCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["primaryId"] = this.primaryId;
        return data;
    }
}

export interface ICreateRestaurantOrderDetailCommandDto {
    id?: string | undefined;
    createdDate?: Date;
    primaryId?: number | undefined;
}

export class CreateRestaurantOrderDetailCommand implements ICreateRestaurantOrderDetailCommand {
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateRestaurantOrderDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.restaurantOrderID = _data["restaurantOrderID"];
            this.foodID = _data["foodID"];
            this.orderDetailFoodPrice = _data["orderDetailFoodPrice"];
            this.orderQuantity = _data["orderQuantity"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderSource = _data["orderSource"];
            this.orderDetailNotes = _data["orderDetailNotes"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateRestaurantOrderDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantOrderDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["restaurantOrderID"] = this.restaurantOrderID;
        data["foodID"] = this.foodID;
        data["orderDetailFoodPrice"] = this.orderDetailFoodPrice;
        data["orderQuantity"] = this.orderQuantity;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderSource"] = this.orderSource;
        data["orderDetailNotes"] = this.orderDetailNotes;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateRestaurantOrderDetailCommand {
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateRestaurantOrderDetailCommandDto implements IResultOfUpdateRestaurantOrderDetailCommandDto {
    data?: UpdateRestaurantOrderDetailCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateRestaurantOrderDetailCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateRestaurantOrderDetailCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateRestaurantOrderDetailCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateRestaurantOrderDetailCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateRestaurantOrderDetailCommandDto {
    data?: UpdateRestaurantOrderDetailCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateRestaurantOrderDetailCommandDto implements IUpdateRestaurantOrderDetailCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
    primaryId?: number | undefined;

    constructor(data?: IUpdateRestaurantOrderDetailCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            this.primaryId = _data["primaryId"];
        }
    }

    static fromJS(data: any): UpdateRestaurantOrderDetailCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantOrderDetailCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["primaryId"] = this.primaryId;
        return data;
    }
}

export interface IUpdateRestaurantOrderDetailCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
    primaryId?: number | undefined;
}

export class UpdateRestaurantOrderDetailCommand implements IUpdateRestaurantOrderDetailCommand {
    uniqueId?: string | undefined;
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateRestaurantOrderDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.restaurantOrderID = _data["restaurantOrderID"];
            this.foodID = _data["foodID"];
            this.orderDetailFoodPrice = _data["orderDetailFoodPrice"];
            this.orderQuantity = _data["orderQuantity"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderSource = _data["orderSource"];
            this.orderDetailNotes = _data["orderDetailNotes"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateRestaurantOrderDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantOrderDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["restaurantOrderID"] = this.restaurantOrderID;
        data["foodID"] = this.foodID;
        data["orderDetailFoodPrice"] = this.orderDetailFoodPrice;
        data["orderQuantity"] = this.orderQuantity;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderSource"] = this.orderSource;
        data["orderDetailNotes"] = this.orderDetailNotes;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateRestaurantOrderDetailCommand {
    uniqueId?: string | undefined;
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllRestaurantOrderDetailQueryDto implements IGetAllRestaurantOrderDetailQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllRestaurantOrderDetailQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.restaurantOrderID = _data["restaurantOrderID"];
            this.foodID = _data["foodID"];
            this.orderDetailFoodPrice = _data["orderDetailFoodPrice"];
            this.orderQuantity = _data["orderQuantity"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderSource = _data["orderSource"];
            this.orderDetailNotes = _data["orderDetailNotes"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllRestaurantOrderDetailQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantOrderDetailQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["restaurantOrderID"] = this.restaurantOrderID;
        data["foodID"] = this.foodID;
        data["orderDetailFoodPrice"] = this.orderDetailFoodPrice;
        data["orderQuantity"] = this.orderQuantity;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderSource"] = this.orderSource;
        data["orderDetailNotes"] = this.orderDetailNotes;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllRestaurantOrderDetailQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllRestaurantOrderDetailByIdQueryDto implements IResultOfGetAllRestaurantOrderDetailByIdQueryDto {
    data?: GetAllRestaurantOrderDetailByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllRestaurantOrderDetailByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllRestaurantOrderDetailByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllRestaurantOrderDetailByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllRestaurantOrderDetailByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllRestaurantOrderDetailByIdQueryDto {
    data?: GetAllRestaurantOrderDetailByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllRestaurantOrderDetailByIdQueryDto implements IGetAllRestaurantOrderDetailByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllRestaurantOrderDetailByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.restaurantOrderID = _data["restaurantOrderID"];
            this.foodID = _data["foodID"];
            this.orderDetailFoodPrice = _data["orderDetailFoodPrice"];
            this.orderQuantity = _data["orderQuantity"];
            this.orderTotalAmount = _data["orderTotalAmount"];
            this.orderSource = _data["orderSource"];
            this.orderDetailNotes = _data["orderDetailNotes"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllRestaurantOrderDetailByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantOrderDetailByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["restaurantOrderID"] = this.restaurantOrderID;
        data["foodID"] = this.foodID;
        data["orderDetailFoodPrice"] = this.orderDetailFoodPrice;
        data["orderQuantity"] = this.orderQuantity;
        data["orderTotalAmount"] = this.orderTotalAmount;
        data["orderSource"] = this.orderSource;
        data["orderDetailNotes"] = this.orderDetailNotes;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllRestaurantOrderDetailByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    restaurantOrderID?: number | undefined;
    foodID?: number | undefined;
    orderDetailFoodPrice?: number | undefined;
    orderQuantity?: number | undefined;
    orderTotalAmount?: number | undefined;
    orderSource?: string | undefined;
    orderDetailNotes?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfCreateRestaurantTableCommandDto implements IResultOfCreateRestaurantTableCommandDto {
    data?: CreateRestaurantTableCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateRestaurantTableCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateRestaurantTableCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateRestaurantTableCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateRestaurantTableCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateRestaurantTableCommandDto {
    data?: CreateRestaurantTableCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateRestaurantTableCommandDto implements ICreateRestaurantTableCommandDto {
    id?: string | undefined;
    createdDate?: Date;

    constructor(data?: ICreateRestaurantTableCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateRestaurantTableCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantTableCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateRestaurantTableCommandDto {
    id?: string | undefined;
    createdDate?: Date;
}

export class CreateRestaurantTableCommand implements ICreateRestaurantTableCommand {
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: ICreateRestaurantTableCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tableName = _data["tableName"];
            this.tableDescription = _data["tableDescription"];
            this.tableLocation = _data["tableLocation"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateRestaurantTableCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantTableCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tableName"] = this.tableName;
        data["tableDescription"] = this.tableDescription;
        data["tableLocation"] = this.tableLocation;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateRestaurantTableCommand {
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUpdateRestaurantTableCommandDto implements IResultOfUpdateRestaurantTableCommandDto {
    data?: UpdateRestaurantTableCommandDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateRestaurantTableCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateRestaurantTableCommandDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateRestaurantTableCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateRestaurantTableCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateRestaurantTableCommandDto {
    data?: UpdateRestaurantTableCommandDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateRestaurantTableCommandDto implements IUpdateRestaurantTableCommandDto {
    id?: string | undefined;
    updatedDate?: Date;

    constructor(data?: IUpdateRestaurantTableCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateRestaurantTableCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantTableCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateRestaurantTableCommandDto {
    id?: string | undefined;
    updatedDate?: Date;
}

export class UpdateRestaurantTableCommand implements IUpdateRestaurantTableCommand {
    uniqueId?: string | undefined;
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IUpdateRestaurantTableCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueId = _data["uniqueId"];
            this.tableName = _data["tableName"];
            this.tableDescription = _data["tableDescription"];
            this.tableLocation = _data["tableLocation"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UpdateRestaurantTableCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRestaurantTableCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueId"] = this.uniqueId;
        data["tableName"] = this.tableName;
        data["tableDescription"] = this.tableDescription;
        data["tableLocation"] = this.tableLocation;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IUpdateRestaurantTableCommand {
    uniqueId?: string | undefined;
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;
}

export class GetAllRestaurantTableQueryDto implements IGetAllRestaurantTableQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllRestaurantTableQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.tableName = _data["tableName"];
            this.tableDescription = _data["tableDescription"];
            this.tableLocation = _data["tableLocation"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllRestaurantTableQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantTableQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["tableName"] = this.tableName;
        data["tableDescription"] = this.tableDescription;
        data["tableLocation"] = this.tableLocation;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllRestaurantTableQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfGetAllRestaurantTableByIdQueryDto implements IResultOfGetAllRestaurantTableByIdQueryDto {
    data?: GetAllRestaurantTableByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGetAllRestaurantTableByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllRestaurantTableByIdQueryDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGetAllRestaurantTableByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGetAllRestaurantTableByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGetAllRestaurantTableByIdQueryDto {
    data?: GetAllRestaurantTableByIdQueryDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GetAllRestaurantTableByIdQueryDto implements IGetAllRestaurantTableByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetAllRestaurantTableByIdQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueId = _data["uniqueId"];
            this.tableName = _data["tableName"];
            this.tableDescription = _data["tableDescription"];
            this.tableLocation = _data["tableLocation"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetAllRestaurantTableByIdQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRestaurantTableByIdQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueId"] = this.uniqueId;
        data["tableName"] = this.tableName;
        data["tableDescription"] = this.tableDescription;
        data["tableLocation"] = this.tableLocation;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IGetAllRestaurantTableByIdQueryDto {
    id?: number | undefined;
    uniqueId?: string | undefined;
    tableName?: string | undefined;
    tableDescription?: string | undefined;
    tableLocation?: string | undefined;
    isActive?: boolean | undefined;
}

export class ResultOfUsersListDto implements IResultOfUsersListDto {
    data?: UsersListDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUsersListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UsersListDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUsersListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUsersListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUsersListDto {
    data?: UsersListDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UsersListDto implements IUsersListDto {
    users?: UsersDto[] | undefined;

    constructor(data?: IUsersListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UsersDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UsersListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsersListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUsersListDto {
    users?: UsersDto[] | undefined;
}

export class UsersDto implements IUsersDto {
    id?: string | undefined;
    avatar?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;

    constructor(data?: IUsersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.avatar = _data["avatar"];
            this.userName = _data["userName"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.isAdminAccount = _data["isAdminAccount"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.birthDate = _data["birthDate"];
        }
    }

    static fromJS(data: any): UsersDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["avatar"] = this.avatar;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["isAdminAccount"] = this.isAdminAccount;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["birthDate"] = this.birthDate;
        return data;
    }
}

export interface IUsersDto {
    id?: string | undefined;
    avatar?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;
}

export class ResultOfUserByIDDto implements IResultOfUserByIDDto {
    data?: UserByIDDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUserByIDDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UserByIDDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUserByIDDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUserByIDDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUserByIDDto {
    data?: UserByIDDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UserByIDDto implements IUserByIDDto {
    id?: string | undefined;
    avatar?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;

    constructor(data?: IUserByIDDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.avatar = _data["avatar"];
            this.userName = _data["userName"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.isAdminAccount = _data["isAdminAccount"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.birthDate = _data["birthDate"];
        }
    }

    static fromJS(data: any): UserByIDDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserByIDDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["avatar"] = this.avatar;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["isAdminAccount"] = this.isAdminAccount;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["birthDate"] = this.birthDate;
        return data;
    }
}

export interface IUserByIDDto {
    id?: string | undefined;
    avatar?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;
}

export class ResultOfCreateUserDto implements IResultOfCreateUserDto {
    data?: CreateUserDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfCreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CreateUserDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfCreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfCreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfCreateUserDto {
    data?: CreateUserDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class CreateUserDto implements ICreateUserDto {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.isAdminAccount = _data["isAdminAccount"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.birthDate = _data["birthDate"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["isAdminAccount"] = this.isAdminAccount;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["birthDate"] = this.birthDate;
        return data;
    }
}

export interface ICreateUserDto {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    isAdminAccount?: boolean | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    userName?: string | undefined;
    password?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.birthDate = _data["birthDate"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["birthDate"] = this.birthDate;
        return data;
    }
}

export interface ICreateUserCommand {
    userName?: string | undefined;
    password?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;
}

export class ResultOfUpdateUserDto implements IResultOfUpdateUserDto {
    data?: UpdateUserDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdateUserDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdateUserDto {
    data?: UpdateUserDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdateUserDto implements IUpdateUserDto {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.birthDate = _data["birthDate"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["birthDate"] = this.birthDate;
        return data;
    }
}

export interface IUpdateUserDto {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;
}

export class UpdateUserCommand implements IUpdateUserCommand {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;

    constructor(data?: IUpdateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.emailAddress = _data["emailAddress"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.province = _data["province"];
            this.region = _data["region"];
            this.zipCode = _data["zipCode"];
            this.contactNumber = _data["contactNumber"];
            this.birthDate = _data["birthDate"];
        }
    }

    static fromJS(data: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["emailAddress"] = this.emailAddress;
        data["street"] = this.street;
        data["city"] = this.city;
        data["province"] = this.province;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["contactNumber"] = this.contactNumber;
        data["birthDate"] = this.birthDate;
        return data;
    }
}

export interface IUpdateUserCommand {
    id?: string | undefined;
    userName?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    emailAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    contactNumber?: string | undefined;
    birthDate?: string | undefined;
}

export class ResultOfUpdatePasswordDto implements IResultOfUpdatePasswordDto {
    data?: UpdatePasswordDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfUpdatePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UpdatePasswordDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfUpdatePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfUpdatePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfUpdatePasswordDto {
    data?: UpdatePasswordDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class UpdatePasswordDto implements IUpdatePasswordDto {
    id?: string | undefined;
    updatedDate?: Date | undefined;

    constructor(data?: IUpdatePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdatePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdatePasswordDto {
    id?: string | undefined;
    updatedDate?: Date | undefined;
}

export class UpdatePasswordCommand implements IUpdatePasswordCommand {
    userName?: string | undefined;
    oldPassword?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IUpdatePasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.oldPassword = _data["oldPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): UpdatePasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IUpdatePasswordCommand {
    userName?: string | undefined;
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
}

export class ResultOfGeneratePasswordDto implements IResultOfGeneratePasswordDto {
    data?: GeneratePasswordDto | undefined;
    message?: string;
    resultType?: ResultType;

    constructor(data?: IResultOfGeneratePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GeneratePasswordDto.fromJS(_data["data"]) : <any>undefined;
            this.message = _data["message"];
            this.resultType = _data["resultType"];
        }
    }

    static fromJS(data: any): ResultOfGeneratePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGeneratePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["resultType"] = this.resultType;
        return data;
    }
}

export interface IResultOfGeneratePasswordDto {
    data?: GeneratePasswordDto | undefined;
    message?: string;
    resultType?: ResultType;
}

export class GeneratePasswordDto implements IGeneratePasswordDto {
    password?: string | undefined;

    constructor(data?: IGeneratePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): GeneratePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeneratePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        return data;
    }
}

export interface IGeneratePasswordDto {
    password?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}